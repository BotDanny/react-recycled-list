{"version":3,"sources":["../../src/components/utils.tsx","../../src/components/TypeDef.tsx","../../src/components/AbstractList.tsx","../../src/components/FixedSizeList.tsx","../../src/components/VariableList.tsx","../../src/components/FullWindowFixedList.tsx","../../src/components/ResponsiveContainer.tsx","../../src/components/ResponsiveWindowContainer.tsx","pages/GeneralPage.tsx","pages/SimpleList.tsx","pages/SimpleGrid.tsx","pages/VariableRowHeight.tsx","pages/VariableColumn.tsx","pages/FullWindow.tsx","pages/VariableRowHeightColumn.tsx","pages/CustomWindow.tsx","pages/ResponsiveContainerDemo.tsx","pages/ResponsiveWindowContainerDemo.tsx","pages/LazyLoadingAdvanced.tsx","pages/LazyLoadingSimple.tsx","pages/DynamicLoading.tsx","pages/ScrollIndicator.tsx","pages/ScrollTo.tsx","pages/ReactWindowComparison.tsx","pages/Performance.tsx","pages/ScrollRestoration.tsx","pages/SSR.tsx","pages/BeforeYouBegin.tsx","pages/FixedListDoc.tsx","pages/VariableListDoc.tsx","pages/FullWindowFixedListDoc.tsx","pages/FullWindowVariableList.tsx","pages/ResponsiveWindowContainerDoc.tsx","pages/ResponsiveCustomWindow.tsx","pages/ResponsiveContainerDoc.tsx","SideNav.tsx","pages/WhyPage.tsx","App.tsx","index.tsx","pages/listProps.png"],"names":["calculateRowPositions","rowHeights","prev","rowPositions","rowCount","i","mapRowIndexToDataIndex","rowColumns","totalNumOfData","prevEndDataIndex","map","newEndDataIndex","Math","validateScrollTo","result","Error","sortedLastIndex","array","target","start","end","mid","sortedFirstIndex","noRowRenderInfo","firstRenderedRowIndex","firstRenderedDataIndex","lastRenderedRowIndex","lastRenderedDataIndex","lastRowIndex","noRowVisibilityInfo","firstVisibleRowIndex","firstVisibleDataIndex","lastVisibleRowIndex","lastVisibleDataIndex","General","constructor","props","onListWillRecycle","onRenderedRowChange","scrollState","newScrollState","newRenderedRowIndex","newTopRenderedRowRelativeIndex","topRowIndex","onScrollChange","scrollTop","onVisibleRowChange","recycle","topScroll","rowsToRecycle","renderedRowIndex","bottomRenderedRowIndex","topRenderedRowRelativeIndex","viewportBottom","cycle","resetList","onScroll","event","scrollToDataIndex","targetIndex","targetRow","Object","value","targetPosition","scrollToRow","scrollTo","manualScroll","mod","m","n","getResetViewportBottom","_debounceScrollState","clearTimeout","setTimeout","componentDidMount","initialScrollTop","this","componentWillUnmount","onUnmount","componentDidUpdate","shouldResetList","render","listProps","listWindowProps","rowComponent","ListTag","listTagName","WindowTag","listWindowTagName","RowComponent","style","height","overflowY","width","ref","listWindowRef","position","dataIndexInfo","startDataIndex","endDataIndex","key","index","data","dataIndex","dataEndIndex","row","absoluteRowIndex","column","isScrolling","top","React","PureComponent","FixedList","initializeProperties","offScreenRow","acc","calculatedRowColumns","Array","rowToDataIndexMap","totalRows","numOfInvisibleRowOnEachDirection","totalNumOfRenderedRows","initialArrayTemplate","fullHeight","windowHeight","prevProps","currentProp","getTopViewportRowIndex","getBottomViewportRowIndex","viewportBottomRow","Number","initialRenderedRowIndex","initialScrollState","GeneralList","VariableList","FullWindowFixedList","rootMarginTop","rootMarginBottom","calculatedWindowHeight","serverSideHeight","scrollRef","parseInt","window","scrollListener","numOfVisibleRow","attachScrollListener","getScrollTop","recycledList","distanceBetweenScrollContainerAndWindow","parsedTargetPosition","fullWindowHeight","distanceToWindowTopFromTopOfList","customElement","distanceToElementTopFromTopOfList","resetListAndRef","setCustomScrollRef","console","fullListRef","ResponsiveContainer","className1","className2","useResizeDetector","refreshMode","debounceResize","refreshRate","debounceInterval","setHasMounted","className","hasMounted","ResponsiveWindowContainer","targetRef","forceRerender","GeneralPage","code","Demo","language","randInt","min","max","floor","random","SimpleListDemo","fill","_","Row","rowHeight","memo","inlist","SimpleGridDemo","rowData","slice","columnStyle","textAlign","item","VariableRowHeightDemo","VariableColumnDemo","columnsInEachRow","totalNumberOfItems","reduce","1","2","3","4","FullWindowDemo","VariableRowHeightColumnDemo","dataLength","heights","columns","nextDataIndex","tempNextDataIndex","generateRamdomRowHeightAndColumn","length","CustomWindowDemo","useRef","listRef","useState","setComponentHasMounted","useLayoutEffect","current","fillerStyle","padding","ResponsiveContainerDemo","resize","overflow","sizeInfo","log","ResponsiveWindowContainerDemo","fetchData","page","onSuccess","push","initialStore","nextPage","isLoading","LazyLoadingDemo","store","setStore","onFetchDataSuccess","newData","newStoreData","undefined","useEffect","listData","values","flat","renderInfo","displayValue","setData","setIsLoading","startIndex","endIndex","initialPagedData","hasLoaded","populateInitialPage","getPageFromDataIndex","DynamicLoadingDemo","pagedData","setPagedData","dataList","useMemo","currentTopPage","currentBottomPage","currentPages","pop","forEach","ScrollIndicatorDemo","useScrollIndicator","ScrollToDemo","display","justifyContent","alignItems","Button","variant","color","textTransform","onClick","ReactWindowDemo","itemSize","itemCount","ReactWindowRow","handleClick","chips","Chip","avatar","Avatar","label","areEqual","TabPanel","children","other","role","hidden","id","aria-labelledby","Box","p","Typography","PerformanceDemo","NoOptimization","chipIndex","SimpleList","setPrevScrollTop","code1","code2","FixedListDocProps","pl","pr","Divider","fontWeight","pb","pt","dataCode","rowCode","fontStyle","rowColumnsCode","onRenderedRowChangeCode","listPropsCode","src","listPropsImg","FixedListMethods","methodsCode","VariableListDocProps","rowHeightsCode","FullWindowFixedListDocProps","to","FullWindowFixedListMethods","FullWindowVariableListDocProps","ResponsiveCustomWindowDemo","stats","Stats","SideNav","pathname","useLocation","document","getElementById","appendChild","dom","Drawer","anchor","ListItem","ListItemText","primary","List","introductions","route","button","component","Link","selected","examples","components","left","showPanel","requestAnimationFrame","animate","begin","href","setValue","AppBar","Tabs","onChange","newValue","aria-label","Tab","Alert","severity","prevScrol","App","Page","path","exact","ReactDOM","module","exports"],"mappings":"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","file":"static/js/main.f855e348.chunk.js","sourcesContent":["export function calculateRowPositions(rowHeights: number[]) {\n  let prev = 0;\n  const rowPositions: number[] = [];\n  const rowCount = rowHeights.length;\n  for (let i = 0; i < rowCount; i++) {\n    if (i === 0) rowPositions[i] = 0;\n    else rowPositions[i] = prev;\n    prev += rowHeights[i];\n  }\n  return rowPositions;\n}\n\nexport type RowToDataIndexMap = { [key: string]: [number, number] };\nexport function mapRowIndexToDataIndex(\n  rowColumns: number[],\n  totalNumOfData: number\n) {\n  const rowCount = rowColumns.length;\n  let prevEndDataIndex = 0;\n  let map: RowToDataIndexMap = {};\n  for (let i = 0; i < rowCount; i++) {\n    const newEndDataIndex = Math.min(\n      prevEndDataIndex + rowColumns[i],\n      totalNumOfData\n    );\n    map[i] = [prevEndDataIndex, newEndDataIndex];\n    prevEndDataIndex = newEndDataIndex;\n  }\n  return map;\n}\n\nexport function classNames(className1: string, className2: string | undefined) {\n  if (className2) return `${className1} ${className2}`;\n  else return className1;\n}\n\nexport function validateScrollTo(result: any) {\n  if (result === -1 || result === undefined) {\n    throw Error(\n      'Invalid input to ScrollTo, make sure your input data index or row is correct'\n    );\n  }\n}\n\nexport function sortedLastIndex(array: number[], target: number) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (array[mid] <= target) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return start;\n}\n\nexport function sortedFirstIndex(array: number[], target: number) {\n  let start = 0;\n  let end = array.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (array[mid] < target) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return start;\n}\n","export interface RowProps {\n  data: any[];\n  row: number;\n  dataIndex: number;\n  dataEndIndex: number;\n  column: number;\n  isScrolling: boolean;\n  top: number;\n  height: number;\n}\n\ninterface general extends RowProps {\n  [key:string]: any\n}\n\nexport interface ReactRecycledListProps {\n  width?: string | number;\n  /**\n   * An array of data\n   *\n   * For vertical lists, this must be a number. It affects the number of rows that will be rendered (and displayed) at any given time.\n   *\n   * For horizontal lists, this can be a number or a string (e.g. \"50%\").\n   */\n  data: any[];\n  rowHeight: number;\n  rowComponent: React.ElementType<general>;\n  initialScrollTop?: number;\n  column?: number;\n  rowColumns?: number[];\n  offScreenRow?: number;\n  listWindowProps?: object;\n  listWindowTagName?: string;\n  listProps?: object;\n  listTagName?: string;\n  useScrollIndicator?: boolean;\n  scrollInterval?: number;\n  onRenderedRowChange?: onRenderedRowChangeCallBack;\n  onVisibleRowChange?: onVisibleRowChangeCallBack;\n  onUnmount?: (scrollTop: number) => void;\n}\n\nexport interface RenderInfo {\n  firstRenderedRowIndex: number;\n  firstRenderedDataIndex: number;\n  lastRenderedRowIndex: number;\n  lastRenderedDataIndex: number;\n  lastRowIndex: number;\n}\n\nexport interface VisibilityInfo {\n  firstVisibleRowIndex: number;\n  firstVisibleDataIndex: number;\n  lastVisibleRowIndex: number;\n  lastVisibleDataIndex: number;\n  lastRowIndex: number;\n}\n\nexport type onRenderedRowChangeCallBack = (renderInfo: RenderInfo) => void;\n\nexport type onVisibleRowChangeCallBack = (\n  visibilityInfo: VisibilityInfo\n) => void;\n\nexport interface ReactRecycledListState {\n  renderedRowIndex: number[];\n  topRenderedRowRelativeIndex: number;\n  scrollState: boolean[];\n}\n\nexport const noRowRenderInfo: RenderInfo = {\n  firstRenderedRowIndex: -1,\n  firstRenderedDataIndex: -1,\n  lastRenderedRowIndex: -1,\n  lastRenderedDataIndex: -1,\n  lastRowIndex: -1\n};\n\nexport const noRowVisibilityInfo: VisibilityInfo = {\n  firstVisibleRowIndex: -1,\n  firstVisibleDataIndex: -1,\n  lastVisibleRowIndex: -1,\n  lastVisibleDataIndex: -1,\n  lastRowIndex: -1\n};\n","import React from 'react';\nimport {\n  noRowRenderInfo,\n  noRowVisibilityInfo,\n  ReactRecycledListProps,\n  ReactRecycledListState,\n  RowProps\n} from './TypeDef';\nimport { RowToDataIndexMap, validateScrollTo } from './utils';\n\nexport default abstract class General<\n  P extends ReactRecycledListProps,\n  S extends ReactRecycledListState\n> extends React.PureComponent<P, S> {\n  prevScroll: number;\n  prevLastVisibleRow: number;\n  prevLastRenderedRow: number;\n  abstract listWindowRef: any;\n  abstract rowHeights: number[];\n  abstract rowPositions: number[];\n  abstract rowToDataIndexMap: RowToDataIndexMap;\n  abstract totalNumOfRenderedRows: number;\n  abstract initialArrayTemplate: null[];\n  abstract totalRows: number;\n  abstract fullHeight: number;\n  abstract timeOut: any;\n  abstract windowHeight: number;\n  abstract numOfInvisibleRowOnEachDirection: number;\n  abstract getTopViewportRowIndex(scrollTop: number): number;\n  abstract getBottomViewportRowIndex(scrollTop: number): number;\n  abstract shouldResetList(prevProps: P): boolean;\n  abstract initializeProperties(): any;\n\n  constructor(props: P) {\n    super(props);\n    this.prevScroll = 0;\n    this.prevLastVisibleRow = -1;\n    this.prevLastRenderedRow = -1;\n  }\n\n  componentDidMount() {\n    const { initialScrollTop } = this.props;\n    if (initialScrollTop) {\n      this.manualScroll(initialScrollTop as number);\n    }\n  }\n\n  componentWillUnmount() {\n    const { onUnmount } = this.props;\n    if (onUnmount) onUnmount(this.prevScroll);\n  }\n\n  componentDidUpdate(prevProps: P) {\n    if (this.shouldResetList(prevProps)) {\n      const {\n        rowToDataIndexMap,\n        rowPositions,\n        totalRows,\n        initialArrayTemplate,\n        fullHeight,\n        totalNumOfRenderedRows,\n        numOfInvisibleRowOnEachDirection,\n        windowHeight,\n        rowHeights\n      } = this.initializeProperties();\n\n      this.rowToDataIndexMap = rowToDataIndexMap;\n      this.rowPositions = rowPositions;\n      this.totalRows = totalRows;\n      this.initialArrayTemplate = initialArrayTemplate;\n      this.fullHeight = fullHeight;\n      this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n      this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n      this.rowHeights = rowHeights;\n      this.windowHeight = windowHeight;\n      this.resetList();\n    }\n  }\n\n  onListWillRecycle = (\n    newRenderedRowIndex: number[],\n    newScrollState: boolean[],\n    newTopRenderedRowRelativeIndex: number\n  ) => {\n    const { useScrollIndicator, onRenderedRowChange } = this.props;\n    if (useScrollIndicator) {\n      this.setState({\n        scrollState: newScrollState\n      });\n      this._debounceScrollState();\n    }\n\n    if (onRenderedRowChange) {\n      if (this.totalNumOfRenderedRows === 0) {\n        onRenderedRowChange(noRowRenderInfo);\n        return;\n      }\n\n      const lastRenderedRowIndex =\n        newRenderedRowIndex[this.mod(newTopRenderedRowRelativeIndex - 1)];\n      if (lastRenderedRowIndex === this.prevLastRenderedRow) return;\n      const topRowIndex = newRenderedRowIndex[newTopRenderedRowRelativeIndex];\n      onRenderedRowChange({\n        firstRenderedRowIndex: topRowIndex,\n        firstRenderedDataIndex: this.rowToDataIndexMap[topRowIndex][0],\n        lastRenderedRowIndex: lastRenderedRowIndex,\n        lastRenderedDataIndex:\n          this.rowToDataIndexMap[lastRenderedRowIndex][1] - 1,\n        lastRowIndex: this.totalRows - 1\n      });\n      this.prevLastRenderedRow = lastRenderedRowIndex;\n    }\n  };\n\n  onScrollChange = (scrollTop: number) => {\n    const { onVisibleRowChange } = this.props;\n    if (!onVisibleRowChange) return;\n\n    if (this.totalNumOfRenderedRows === 0) {\n      onVisibleRowChange(noRowVisibilityInfo);\n      this.prevLastVisibleRow = -1;\n      return;\n    }\n\n    let lastVisibleRowIndex = this.getBottomViewportRowIndex(\n      scrollTop + this.windowHeight //view port bottom position\n    );\n\n    if (this.fullHeight < this.windowHeight) {\n      lastVisibleRowIndex = this.getBottomViewportRowIndex(\n        scrollTop + this.fullHeight //view port bottom position\n      );\n    }\n\n    if (lastVisibleRowIndex === this.prevLastVisibleRow) return;\n    const firstVisibleRowIndex = this.getTopViewportRowIndex(scrollTop);\n    const firstVisibleDataIndex = this.rowToDataIndexMap[\n      firstVisibleRowIndex\n    ][0];\n\n    const lastVisibleDataIndex =\n      this.rowToDataIndexMap[lastVisibleRowIndex][1] - 1;\n    onVisibleRowChange({\n      firstVisibleRowIndex,\n      firstVisibleDataIndex,\n      lastVisibleRowIndex,\n      lastVisibleDataIndex,\n      lastRowIndex: this.totalRows - 1\n    });\n    this.prevLastVisibleRow = lastVisibleRowIndex;\n  };\n\n  recycle = (scrollTop: number) => {\n    const {\n      renderedRowIndex,\n      topRenderedRowRelativeIndex,\n      scrollState\n    } = this.state;\n    const topScroll = scrollTop - this.prevScroll > 0 ? false : true;\n    this.prevScroll = scrollTop;\n\n    this.onScrollChange(scrollTop);\n\n    let rowsToRecycle = 0;\n    if (topScroll) {\n      const topRenderedRowIndex = renderedRowIndex[topRenderedRowRelativeIndex];\n      const newTopRenderedRowIndex = Math.max(\n        this.getTopViewportRowIndex(scrollTop) -\n          this.numOfInvisibleRowOnEachDirection,\n        0\n      );\n      rowsToRecycle = topRenderedRowIndex - newTopRenderedRowIndex;\n    } else {\n      const bottomRenderedRowIndex =\n        renderedRowIndex[this.mod(topRenderedRowRelativeIndex - 1)];\n      const viewportBottom = scrollTop + this.windowHeight;\n      const newBottomRenderedRowIndex = Math.min(\n        this.getBottomViewportRowIndex(viewportBottom) +\n          this.numOfInvisibleRowOnEachDirection,\n        this.totalRows - 1\n      );\n\n      rowsToRecycle = newBottomRenderedRowIndex - bottomRenderedRowIndex;\n    }\n\n    if (rowsToRecycle > 0) {\n      const newRenderedRowIndex = [...renderedRowIndex];\n      const newScrollState = [...scrollState];\n      let cycle = 0;\n      while (cycle < rowsToRecycle) {\n        const newTopRenderedRowRelativeIndex = this.mod(\n          topRenderedRowRelativeIndex + (topScroll ? -cycle - 1 : cycle)\n        );\n\n        newRenderedRowIndex[newTopRenderedRowRelativeIndex] += topScroll\n          ? -this.totalNumOfRenderedRows\n          : this.totalNumOfRenderedRows;\n\n        newScrollState[newTopRenderedRowRelativeIndex] = true;\n\n        cycle++;\n      }\n\n      const newTopRenderedRowRelativeIndex = this.mod(\n        topRenderedRowRelativeIndex +\n          (topScroll ? -rowsToRecycle : rowsToRecycle)\n      );\n\n      this.onListWillRecycle(\n        newRenderedRowIndex,\n        newScrollState,\n        newTopRenderedRowRelativeIndex\n      );\n\n      this.setState({\n        renderedRowIndex: newRenderedRowIndex,\n        topRenderedRowRelativeIndex: newTopRenderedRowRelativeIndex\n      });\n    }\n  };\n\n  resetList = () => {\n    const bottomRenderedRowIndex = this.totalNumOfRenderedRows - 1;\n    const viewportBottom = this.getResetViewportBottom();\n    const newBottomRenderedRowIndex = Math.min(\n      this.getBottomViewportRowIndex(viewportBottom) +\n        this.numOfInvisibleRowOnEachDirection,\n      this.totalRows - 1\n    );\n\n    const rowsToRecycle = newBottomRenderedRowIndex - bottomRenderedRowIndex;\n\n    let newRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    let newScrollState = this.initialArrayTemplate.map(() => false);\n    let newTopRenderedRowRelativeIndex = 0;\n\n    if (rowsToRecycle > 0) {\n      let cycle = 0;\n      while (cycle < rowsToRecycle) {\n        const newTopRenderedRowRelativeIndex = this.mod(cycle);\n        newRenderedRowIndex[\n          newTopRenderedRowRelativeIndex\n        ] += this.totalNumOfRenderedRows;\n        newScrollState[newTopRenderedRowRelativeIndex] = true;\n        cycle++;\n      }\n      newTopRenderedRowRelativeIndex = this.mod(rowsToRecycle);\n    }\n\n    this.onListWillRecycle(\n      newRenderedRowIndex,\n      newScrollState,\n      newTopRenderedRowRelativeIndex\n    );\n    this.onScrollChange(this.prevScroll);\n    this.setState({\n      renderedRowIndex: newRenderedRowIndex,\n      topRenderedRowRelativeIndex: newTopRenderedRowRelativeIndex\n    });\n  };\n\n  onScroll = (event: React.UIEvent<HTMLElement>) => {\n    this.recycle(event.currentTarget.scrollTop);\n  };\n\n  scrollToDataIndex = (targetIndex: number) => {\n    if (targetIndex === -1) {\n      this.manualScroll(targetIndex);\n      return;\n    }\n    const targetRow = Object.values(this.rowToDataIndexMap).findIndex(\n      (value) => targetIndex >= value[0] && targetIndex < value[1]\n    );\n    validateScrollTo(targetRow);\n    const targetPosition = this.rowPositions[targetRow];\n    this.manualScroll(targetPosition);\n  };\n\n  scrollToRow = (targetRow: number) => {\n    if (targetRow === -1) {\n      this.manualScroll(targetRow);\n      return;\n    }\n    const targetPosition = this.rowPositions[targetRow];\n    validateScrollTo(targetPosition);\n    this.manualScroll(targetPosition);\n  };\n\n  scrollTo = (scrollTop: number) => {\n    this.manualScroll(scrollTop);\n  };\n\n  manualScroll = (targetPosition: number) => {\n    if (this.listWindowRef.current) {\n      if (targetPosition === -1)\n        this.listWindowRef.current.scrollTop = this.fullHeight;\n      else this.listWindowRef.current.scrollTop = targetPosition;\n    }\n  };\n\n  mod = (n: number, m: number = this.totalNumOfRenderedRows) => {\n    return ((n % m) + m) % m;\n  };\n\n  getResetViewportBottom = () => {\n    return this.prevScroll + this.windowHeight;\n  };\n\n  _debounceScrollState = () => {\n    clearTimeout(this.timeOut);\n    this.timeOut = setTimeout(() => {\n      this.setState({\n        scrollState: this.initialArrayTemplate.map(() => false)\n      });\n    }, this.props.scrollInterval || 250);\n  };\n\n  render() {\n    const {\n      listTagName,\n      listProps = {},\n      listWindowProps = {},\n      listWindowTagName,\n      data,\n      width,\n      rowComponent\n    } = this.props;\n    const { renderedRowIndex, scrollState } = this.state;\n\n    const ListTag: any = listTagName || 'div';\n    const WindowTag: any = listWindowTagName || 'div';\n    const RowComponent: React.ElementType<RowProps> = rowComponent;\n    return (\n      <WindowTag\n        {...listWindowProps}\n        style={{\n          height: this.windowHeight,\n          overflowY: 'auto',\n          width: width || '100%'\n        }}\n        onScroll={this.onScroll}\n        ref={this.listWindowRef}\n      >\n        <ListTag\n          {...listProps}\n          style={{\n            height: this.fullHeight,\n            position: 'relative'\n          }}\n        >\n          {renderedRowIndex.map((absoluteRowIndex, index) => {\n            const dataIndexInfo = this.rowToDataIndexMap[absoluteRowIndex];\n            const startDataIndex = dataIndexInfo[0];\n            const endDataIndex = dataIndexInfo[1];\n            return (\n              <RowComponent\n                key={index}\n                data={data}\n                dataIndex={startDataIndex}\n                dataEndIndex={endDataIndex}\n                row={absoluteRowIndex}\n                column={endDataIndex - startDataIndex}\n                isScrolling={scrollState[index]}\n                top={this.rowPositions[absoluteRowIndex]}\n                height={this.rowHeights[absoluteRowIndex]}\n              />\n            );\n          })}\n        </ListTag>\n      </WindowTag>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  RowToDataIndexMap,\n  calculateRowPositions,\n  mapRowIndexToDataIndex\n} from './utils';\nimport { ReactRecycledListProps, ReactRecycledListState } from './TypeDef';\nimport GeneralList from './AbstractList';\n\ninterface FixedListProps extends ReactRecycledListProps {\n  height: number;\n}\n\nexport default class FixedList extends GeneralList<\n  FixedListProps,\n  ReactRecycledListState\n> {\n  rowPositions: number[];\n  rowHeights: number[];\n  rowToDataIndexMap: RowToDataIndexMap;\n  fullHeight: number;\n  windowHeight: number;\n  initialArrayTemplate: null[];\n  totalNumOfRenderedRows: number;\n  numOfInvisibleRowOnEachDirection: number;\n  totalRows: number;\n  timeOut: any;\n  listWindowRef: React.RefObject<HTMLDivElement>;\n\n  initializeProperties = () => {\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      data,\n      height,\n      offScreenRow\n    } = this.props;\n\n    // Validate\n\n    if (rowColumns) {\n      if (\n        rowColumns.reduce((acc, current) => acc + current, 0) !== data.length\n      ) {\n        throw Error(\n          'The total number of data item calculated from rowColumns does not match the length of your input data'\n        );\n      }\n    }\n\n    const calculatedRowColumns = rowColumns\n      ? rowColumns\n      : column\n      ? Array(Math.ceil(data.length / column)).fill(column)\n      : Array(data.length).fill(1);\n    const rowHeights = calculatedRowColumns.map(() => rowHeight);\n\n    const rowToDataIndexMap = mapRowIndexToDataIndex(\n      calculatedRowColumns,\n      data.length\n    );\n    const rowPositions = calculateRowPositions(rowHeights);\n    const totalRows = rowHeights.length;\n\n    const numOfVisibleRow = Math.ceil(height / rowHeight);\n    const numOfInvisibleRowOnEachDirection = offScreenRow || 1;\n    let totalNumOfRenderedRows =\n      numOfVisibleRow + numOfInvisibleRowOnEachDirection * 2;\n    if (totalNumOfRenderedRows > totalRows) totalNumOfRenderedRows = totalRows;\n    const initialArrayTemplate = Array(totalNumOfRenderedRows).fill(null);\n\n    const fullHeight = rowHeights.reduce((acc, current) => acc + current, 0);\n    const windowHeight = height;\n\n    return {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight\n    };\n  };\n\n  constructor(props: FixedListProps) {\n    super(props);\n\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight\n    } = this.initializeProperties();\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    this.listWindowRef = React.createRef();\n\n    const initialRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    const initialScrollState = this.initialArrayTemplate.map(() => false);\n\n    if (!props.initialScrollTop) {\n      this.onListWillRecycle(initialRenderedRowIndex, initialScrollState, 0);\n      this.onScrollChange(0);\n    }\n\n    this.state = {\n      renderedRowIndex: initialRenderedRowIndex,\n      scrollState: initialScrollState,\n      topRenderedRowRelativeIndex: 0\n    };\n  }\n\n  shouldResetList = (prevProps: FixedListProps) => {\n    const currentProp = this.props;\n    if (prevProps === currentProp) return false;\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      height,\n      data,\n      offScreenRow\n    } = currentProp;\n\n    return (\n      prevProps.rowHeight !== rowHeight ||\n      prevProps.column !== column ||\n      prevProps.rowColumns !== rowColumns ||\n      prevProps.height !== height ||\n      prevProps.data !== data ||\n      prevProps.offScreenRow !== offScreenRow\n    );\n  };\n\n  getTopViewportRowIndex = (scrollTop: number) => {\n    return Math.floor(scrollTop / this.props.rowHeight);\n  };\n\n  getBottomViewportRowIndex = (viewportBottom: number) => {\n    let viewportBottomRow = viewportBottom / this.props.rowHeight;\n    if (Number.isInteger(viewportBottomRow)) viewportBottomRow -= 1;\n    else viewportBottomRow = Math.floor(viewportBottomRow);\n    return viewportBottomRow;\n  };\n}\n","import React from 'react';\nimport {\n  RowToDataIndexMap,\n  calculateRowPositions,\n  mapRowIndexToDataIndex\n} from './utils';\nimport { ReactRecycledListProps, ReactRecycledListState } from './TypeDef';\nimport { sortedLastIndex, sortedFirstIndex } from './utils';\nimport GeneralList from './AbstractList';\n\ninterface VariableListProps extends ReactRecycledListProps {\n  rowHeights: number[];\n  height: number;\n}\n\nexport default class VariableList extends GeneralList<\n  VariableListProps,\n  ReactRecycledListState\n> {\n  rowPositions: number[];\n  rowHeights: number[];\n  rowToDataIndexMap: RowToDataIndexMap;\n  fullHeight: number;\n  windowHeight: number;\n  initialArrayTemplate: null[];\n  totalNumOfRenderedRows: number;\n  numOfInvisibleRowOnEachDirection: number;\n  totalRows: number;\n  timeOut: any;\n  listWindowRef: React.RefObject<HTMLDivElement>;\n\n  initializeProperties = () => {\n    const {\n      rowHeight,\n      rowHeights,\n      column,\n      rowColumns,\n      data,\n      height,\n      offScreenRow\n    } = this.props;\n\n    // Validate\n\n    if (rowColumns) {\n      if (\n        rowColumns.reduce((acc, current) => acc + current, 0) !== data.length\n      ) {\n        throw Error(\n          'The total number of data item calculated from rowColumns does not match the length of your input data'\n        );\n      }\n      if (rowColumns.length !== rowHeights.length) {\n        throw Error(\n          'The number of rows provided from rowHeights does not match the number of rows provided from rowColumns'\n        );\n      }\n    } else if (column) {\n      const rows = Math.ceil(data.length / column);\n      if (rows !== rowHeights.length) {\n        throw Error(\n          'The number of rows provided from rowHeights does not match the number of rows calculated from column'\n        );\n      }\n    } else if (rowHeights.length !== data.length) {\n      throw Error(\n        'The number of rows provided from rowHeights does not match the number of rows calculated from your input data'\n      );\n    }\n\n    const calculatedRowColumns = rowColumns\n      ? rowColumns\n      : column\n      ? Array(rowHeights.length).fill(column)\n      : Array(rowHeights.length).fill(1);\n\n    const rowToDataIndexMap = mapRowIndexToDataIndex(\n      calculatedRowColumns,\n      data.length\n    );\n    const rowPositions = calculateRowPositions(rowHeights);\n    const totalRows = rowHeights.length;\n\n    const numOfVisibleRow = Math.ceil(height / rowHeight);\n    const numOfInvisibleRowOnEachDirection = offScreenRow || 1;\n    let totalNumOfRenderedRows =\n      numOfVisibleRow + numOfInvisibleRowOnEachDirection * 2;\n    if (totalNumOfRenderedRows > totalRows) totalNumOfRenderedRows = totalRows;\n    const initialArrayTemplate = Array(totalNumOfRenderedRows).fill(null);\n\n    const fullHeight = rowHeights.reduce((acc, current) => acc + current, 0);\n    const windowHeight = height;\n\n    return {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight\n    };\n  };\n\n  constructor(props: VariableListProps) {\n    super(props);\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight\n    } = this.initializeProperties();\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    this.listWindowRef = React.createRef();\n\n    const initialRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    const initialScrollState = this.initialArrayTemplate.map(() => false);\n\n    this.onListWillRecycle(initialRenderedRowIndex, initialScrollState, 0);\n    this.onScrollChange(0);\n\n    this.state = {\n      renderedRowIndex: initialRenderedRowIndex,\n      scrollState: initialScrollState,\n      topRenderedRowRelativeIndex: 0\n    };\n  }\n\n  shouldResetList = (prevProps: VariableListProps) => {\n    const currentProp = this.props;\n    if (prevProps === currentProp) return false;\n    const {\n      rowHeight,\n      rowHeights,\n      column,\n      rowColumns,\n      height,\n      data,\n      offScreenRow\n    } = currentProp;\n\n    return (\n      prevProps.rowHeight !== rowHeight ||\n      prevProps.rowHeights !== rowHeights ||\n      prevProps.column !== column ||\n      prevProps.rowColumns !== rowColumns ||\n      prevProps.height !== height ||\n      prevProps.data !== data ||\n      prevProps.offScreenRow !== offScreenRow\n    );\n  };\n\n  getTopViewportRowIndex = (scrollTop: number) => {\n    return sortedLastIndex(this.rowPositions, scrollTop) - 1;\n  };\n\n  getBottomViewportRowIndex = (viewportBottom: number) => {\n    return sortedFirstIndex(this.rowPositions, viewportBottom) - 1;\n  };\n}\n","import { calculateRowPositions, mapRowIndexToDataIndex } from './utils';\nimport { ReactRecycledListProps, ReactRecycledListState } from './TypeDef';\nimport GeneralList from './AbstractList';\nimport { RowToDataIndexMap } from './utils';\nimport { RowProps } from './TypeDef';\nimport React from 'react';\n\nexport interface FullWindowFixedListProps extends ReactRecycledListProps {\n  rootMarginTop?: number;\n  rootMarginBottom?: number;\n  windowHeight?: number;\n  serverSideHeight?: number;\n  scrollRef?: React.MutableRefObject<HTMLElement | undefined | null>;\n}\n\nexport default class FullWindowFixedList<\n  P extends FullWindowFixedListProps,\n  S extends ReactRecycledListState\n> extends GeneralList<P, S> {\n  rowPositions: number[];\n  rowHeights: number[];\n  rowToDataIndexMap: RowToDataIndexMap;\n  fullHeight: number;\n  windowHeight: number;\n  initialArrayTemplate: null[];\n  totalNumOfRenderedRows: number;\n  numOfInvisibleRowOnEachDirection: number;\n  totalRows: number;\n  timeOut: any;\n  initialScrolling: boolean;\n  fullListRef: React.RefObject<HTMLElement>;\n  scrollListener: HTMLElement | (Window & typeof globalThis) | undefined;\n  listWindowRef: any;\n\n  initializeProperties: (constructor?: boolean) => any = (\n    constructor: boolean = false\n  ) => {\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      data,\n      offScreenRow,\n      serverSideHeight,\n      scrollRef,\n      rootMarginTop = 0,\n      rootMarginBottom = 0\n    } = this.props as P;\n\n    // Validate\n\n    if (rowColumns) {\n      if (\n        rowColumns.reduce((acc, current) => acc + current, 0) !== data.length\n      ) {\n        throw Error(\n          'The total number of data item calculated from rowColumns does not match the length of your input data'\n        );\n      }\n    } // no need to consider padding because when you scroll down padding doesn't apply\n\n    let calculatedWindowHeight = 0;\n    let scrollListener;\n\n    if (constructor && serverSideHeight !== undefined) {\n      calculatedWindowHeight = serverSideHeight;\n    } else if ('scrollRef' in this.props) {\n      if (scrollRef?.current) {\n        calculatedWindowHeight = parseInt(\n          window.getComputedStyle(scrollRef.current).height\n        );\n        scrollListener = scrollRef.current;\n      } else calculatedWindowHeight = 0;\n    } else {\n      calculatedWindowHeight = window.innerHeight;\n      scrollListener = window;\n    }\n\n    calculatedWindowHeight = Math.max(\n      0,\n      calculatedWindowHeight - rootMarginTop - rootMarginBottom\n    );\n\n    const calculatedRowColumns = rowColumns\n      ? rowColumns\n      : column\n      ? Array(Math.ceil(data.length / column)).fill(column)\n      : Array(data.length).fill(1);\n    const rowHeights = calculatedRowColumns.map(() => rowHeight);\n\n    const rowToDataIndexMap = mapRowIndexToDataIndex(\n      calculatedRowColumns,\n      data.length\n    );\n    const rowPositions = calculateRowPositions(rowHeights);\n    const totalRows = rowHeights.length;\n\n    const numOfVisibleRow = Math.ceil(calculatedWindowHeight / rowHeight);\n    const numOfInvisibleRowOnEachDirection =\n      offScreenRow || numOfVisibleRow ? 1 : 0;\n    let totalNumOfRenderedRows =\n      numOfVisibleRow + numOfInvisibleRowOnEachDirection * 2;\n    if (totalNumOfRenderedRows > totalRows) totalNumOfRenderedRows = totalRows;\n    const initialArrayTemplate = Array(totalNumOfRenderedRows).fill(null);\n\n    const fullHeight = rowHeights.reduce((acc, current) => acc + current, 0);\n\n    return {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight: calculatedWindowHeight,\n      scrollListener\n    };\n  };\n\n  constructor(props: P) {\n    super(props);\n\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n      scrollListener\n    } = this.initializeProperties(true);\n\n    this.fullListRef = React.createRef();\n    this.listWindowRef = null;\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    this.scrollListener = scrollListener;\n    this.initialScrolling = false;\n\n    const initialRenderedRowIndex = this.initialArrayTemplate.map(\n      (_, index) => index\n    );\n    const initialScrollState = this.initialArrayTemplate.map(() => false);\n\n    if (!props.initialScrollTop && this.scrollListener) {\n      this.onListWillRecycle(initialRenderedRowIndex, initialScrollState, 0);\n      this.onScrollChange(0);\n    }\n\n    this.state = {\n      renderedRowIndex: initialRenderedRowIndex,\n      scrollState: initialScrollState,\n      topRenderedRowRelativeIndex: 0\n    } as S;\n  }\n\n  componentDidMount() {\n    this.attachScrollListener();\n    const { initialScrollTop } = this.props;\n    if (initialScrollTop) {\n      this.manualScroll(initialScrollTop as number);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.scrollListener) {\n      this.scrollListener.removeEventListener('scroll', this.onScroll);\n    }\n    const { onUnmount } = this.props;\n    if (onUnmount) onUnmount(this.prevScroll);\n  }\n\n  attachScrollListener = () => {\n    if (this.scrollListener) {\n      this.scrollListener.removeEventListener('scroll', this.onScroll);\n      this.scrollListener.addEventListener('scroll', this.onScroll);\n    }\n  };\n\n  getScrollTop = () => {\n    const { rootMarginTop = 0 } = this.props;\n    const recycledList = this.fullListRef.current as HTMLElement;\n    if (!recycledList) return window.scrollY;\n    const distanceBetweenScrollContainerAndWindow =\n      this.scrollListener === window\n        ? 0\n        : (this.scrollListener as HTMLElement).getBoundingClientRect().top;\n\n    return -(\n      recycledList.getBoundingClientRect().top -\n      distanceBetweenScrollContainerAndWindow -\n      rootMarginTop\n    );\n  };\n\n  onScroll = () => {\n    if (this.fullListRef) {\n      const scrollTop = this.getScrollTop();\n      this.recycle(scrollTop);\n    }\n  };\n\n  manualScroll = (targetPosition: number) => {\n    let parsedTargetPosition = targetPosition;\n    if (targetPosition === -1) {\n      const { rootMarginBottom = 0, rootMarginTop = 0 } = this.props;\n      const fullWindowHeight =\n        this.windowHeight + rootMarginTop + rootMarginBottom;\n      parsedTargetPosition =\n        this.fullHeight + rootMarginBottom + rootMarginTop - fullWindowHeight;\n    }\n    const { rootMarginTop = 0 } = this.props;\n    if (this.scrollListener) {\n      const recycledList = this.fullListRef.current as HTMLElement;\n      if (this.scrollListener === window) {\n        const distanceToWindowTopFromTopOfList =\n          recycledList.getBoundingClientRect().top + window.scrollY;\n        window.scrollTo({\n          top:\n            distanceToWindowTopFromTopOfList +\n            parsedTargetPosition -\n            rootMarginTop\n        });\n      } else {\n        const customElement = this.scrollListener as HTMLElement;\n        const distanceToElementTopFromTopOfList =\n          recycledList.getBoundingClientRect().top -\n          customElement.getBoundingClientRect().top;\n        customElement.scrollTop =\n          distanceToElementTopFromTopOfList +\n          parsedTargetPosition -\n          rootMarginTop;\n      }\n    }\n  };\n\n  shouldResetList = (prevProps: P) => {\n    const {\n      rowHeight,\n      column,\n      rowColumns,\n      windowHeight,\n      data,\n      offScreenRow,\n      scrollRef,\n      rootMarginBottom,\n      rootMarginTop\n    } = this.props;\n\n    return (\n      prevProps.data !== data ||\n      prevProps.windowHeight !== windowHeight ||\n      (scrollRef && scrollRef.current !== this.scrollListener) ||\n      prevProps.rowHeight !== rowHeight ||\n      prevProps.column !== column ||\n      prevProps.rowColumns !== rowColumns ||\n      prevProps.offScreenRow !== offScreenRow ||\n      prevProps.rootMarginBottom !== rootMarginBottom ||\n      prevProps.rootMarginTop !== rootMarginTop\n    );\n  };\n\n  resetListAndRef = () => {\n    const {\n      rowToDataIndexMap,\n      rowPositions,\n      totalRows,\n      initialArrayTemplate,\n      fullHeight,\n      totalNumOfRenderedRows,\n      numOfInvisibleRowOnEachDirection,\n      rowHeights,\n      windowHeight,\n      scrollListener\n    } = this.initializeProperties();\n    const { scrollRef } = this.props;\n\n    this.rowToDataIndexMap = rowToDataIndexMap;\n    this.rowPositions = rowPositions;\n    this.totalRows = totalRows;\n    this.initialArrayTemplate = initialArrayTemplate;\n    this.fullHeight = fullHeight;\n    this.totalNumOfRenderedRows = totalNumOfRenderedRows;\n    this.numOfInvisibleRowOnEachDirection = numOfInvisibleRowOnEachDirection;\n    this.rowHeights = rowHeights;\n    this.windowHeight = windowHeight;\n    if (scrollRef && scrollRef.current !== this.scrollListener) {\n      this.scrollListener = scrollListener;\n      this.attachScrollListener();\n    }\n    this.resetList();\n  };\n\n  componentDidUpdate(prevProps: P) {\n    if (this.shouldResetList(prevProps)) {\n      this.resetListAndRef();\n    }\n  }\n\n  setCustomScrollRef = () => {\n    this.resetListAndRef();\n  };\n\n  getTopViewportRowIndex = (scrollTop: number) => {\n    return Math.max(Math.floor(scrollTop / this.props.rowHeight), 0);\n  };\n\n  getBottomViewportRowIndex = (viewportBottom: number) => {\n    let viewportBottomRow = viewportBottom / this.props.rowHeight;\n    if (Number.isInteger(viewportBottomRow)) viewportBottomRow -= 1;\n    else viewportBottomRow = Math.floor(viewportBottomRow);\n    return Math.min(viewportBottomRow, this.totalRows - 1);\n  };\n\n  getResetViewportBottom = () => {\n    const { rootMarginBottom = 0, rootMarginTop = 0 } = this.props;\n    const scrollTop = this.getScrollTop();\n    const fullWindowHeight =\n      this.windowHeight + rootMarginTop + rootMarginBottom;\n    return scrollTop + fullWindowHeight - rootMarginBottom;\n  };\n\n  render() {\n    const {\n      listTagName,\n      listProps = {},\n      data,\n      width,\n      rowComponent\n    } = this.props;\n\n    const { renderedRowIndex, scrollState } = this.state;\n    console.log('render');\n\n    const ListTag: any = listTagName || 'div';\n    const RowComponent: React.ElementType<RowProps> = rowComponent;\n    return (\n      <ListTag\n        {...listProps}\n        style={{\n          height: this.fullHeight,\n          position: 'relative',\n          width\n        }}\n        ref={this.fullListRef}\n      >\n        {renderedRowIndex.map((absoluteRowIndex, index) => {\n          const dataIndexInfo = this.rowToDataIndexMap[absoluteRowIndex];\n          const startDataIndex = dataIndexInfo[0];\n          const endDataIndex = dataIndexInfo[1];\n          return (\n            <RowComponent\n              key={index}\n              data={data}\n              dataIndex={startDataIndex}\n              dataEndIndex={endDataIndex}\n              row={absoluteRowIndex}\n              column={endDataIndex - startDataIndex}\n              isScrolling={scrollState[index]}\n              top={this.rowPositions[absoluteRowIndex]}\n              height={this.rowHeights[absoluteRowIndex]}\n            />\n          );\n        })}\n      </ListTag>\n    );\n  }\n}\n","import React from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\nimport { classNames } from './utils';\nexport interface ResponsiveContainerProps {\n  render: (sizeInfo: { width: number; height: number }) => React.ReactNode;\n  className?: string;\n  debounceResize?: boolean;\n  debounceInterval?: number;\n  serverSideHeight?: number;\n}\n\nexport default function ResponsiveContainer(props: ResponsiveContainerProps) {\n  const {\n    render,\n    className,\n    debounceResize,\n    debounceInterval,\n    serverSideHeight\n  } = props;\n  const { width, height, ref } = useResizeDetector({\n    refreshMode: debounceResize ? 'debounce' : undefined,\n    refreshRate: debounceInterval ? debounceInterval : 100\n  });\n  const [hasMounted, setHasMounted] = React.useState(false);\n  React.useLayoutEffect(() => {\n    if (serverSideHeight !== undefined) {\n      setHasMounted(true);\n    }\n  }, []);\n  return (\n    <div\n      className={classNames('react-recycled-responsive-container', className)}\n      ref={ref as React.RefObject<HTMLDivElement>}\n      style={{\n        height: '100%',\n        width: '100%'\n      }}\n    >\n      {render({\n        width: width || 0,\n        height: height || (!hasMounted && serverSideHeight) || 0\n      })}\n    </div>\n  );\n}\n","import React from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\nimport { ResponsiveContainerProps } from './ResponsiveContainer';\ninterface ResponsiveWindowContainerProps extends ResponsiveContainerProps {\n  scrollRef?: React.MutableRefObject<any>;\n}\n\nexport default function ResponsiveWindowContainer(\n  props: ResponsiveWindowContainerProps\n) {\n  const {\n    render,\n    debounceResize,\n    debounceInterval,\n    serverSideHeight,\n    scrollRef\n  } = props;\n  const targetRef = React.useRef<HTMLDivElement>();\n  const { width, height } = useResizeDetector({\n    refreshMode: debounceResize ? 'debounce' : undefined,\n    refreshRate: debounceInterval ? debounceInterval : 100,\n    targetRef: 'scrollRef' in props ? scrollRef : targetRef\n  });\n  const [hasMounted, setHasMounted] = React.useState(false);\n  const [reRender, forceRerender] = React.useState(true);\n  React.useLayoutEffect(() => {\n    if (serverSideHeight !== undefined) {\n      setHasMounted(!hasMounted);\n    }\n  }, []);\n  React.useLayoutEffect(() => {\n    forceRerender(!reRender);\n  }, [scrollRef?.current, scrollRef]);\n  return (\n    <React.Fragment>\n      {render({\n        width: width || 0,\n        height: height || (!hasMounted && serverSideHeight) || 0\n      })}\n\n      <div\n        ref={targetRef as React.RefObject<HTMLDivElement>}\n        style={{ position: 'fixed', height: '100vh', width: '100vw' }}\n      />\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Highlight from 'react-highlight.js';\nexport default function GeneralPage(props: { code: string; Demo: any }) {\n  const { code, Demo } = props;\n  return (\n    <>\n      <div className='demo-section half-section'>\n        <Demo />\n      </div>\n      <div className='code-section half-section'>\n        <div className='code-wrapper'>\n          <Highlight language='js'>{code}</Highlight>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function randInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function generateRamdomRowHeightAndColumn(dataLength: number) {\n  const heights: number[] = [];\n  const columns: number[] = [];\n  let nextDataIndex = 0;\n  for (let i = 0; nextDataIndex < dataLength; i++) {\n    heights[i] = randInt(60, 140);\n    const column = randInt(1, 4);\n    const tempNextDataIndex = nextDataIndex + column;\n    columns[i] =\n      tempNextDataIndex > dataLength ? dataLength - nextDataIndex : column;\n    nextDataIndex = tempNextDataIndex;\n  }\n\n  return [heights, columns];\n}\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport GeneralPage from './GeneralPage';\n\nexport default function SimpleList() {\n  return <GeneralPage code={code} Demo={SimpleListDemo} />;\n}\n\nfunction SimpleListDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return (\n    <div style={{ top, height }} className='react-recycled-row' inlist>\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction SimpleListDemo() {\n\n  const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100}/>\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex, top, height } = props;\n\n  const value = data[dataIndex];\n  // Important!, make sure you inline-style your component with the the provided top, height. Also make sure to set your container element to position absolute\n  return <div style={{top, height}} className=\"react-recycled-row\">{value}</div>;\n})`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport GeneralPage from './GeneralPage';\n\nexport default function SimpleGrid() {\n  return <GeneralPage code={code} Demo={SimpleGridDemo} />;\n}\n\nfunction SimpleGridDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList\n      height={300}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      column={4}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, top, height } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: '25%',\n    textAlign: 'center' as any\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction SimpleGridDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    return <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} column={4} />\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height } = props;\n\n    // You are given the start and end index of the data in this row. You style and arrange the columns yourself\n    // Note the data item at dataEndIndex is not included in the row. If dataIndex = 0 and dataEndIndex = 3 then the data in this row is 0, 1 and 2\n\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n        width: \"25%\",\n        textAlign: \"center\",\n    };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from 'react';\nimport { VariableList, RowProps } from 'react-recycled-list';\nimport GeneralPage, { randInt } from './GeneralPage';\n\nexport default function VariableRowHeight() {\n  return <GeneralPage code={code} Demo={VariableRowHeightDemo} />;\n}\n\nfunction VariableRowHeightDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const rowHeights = data.map((_, index) => randInt(60, 140));\n\n  return (\n    <VariableList\n      height={400}\n      rowComponent={Row}\n      data={data}\n      rowHeight={80}\n      rowHeights={rowHeights}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { VariableList } from \"react-recycled-list\";\n\nfunction VariableRowHeightDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n\n    // You define the height of each row. In this case, each row has random height between 60 and 140\n    // Note the length of this array must match the total amount of rows in the list/grid\n\n    const rowHeights = data.map((_, index) => randInt(60, 140));\n    \n    // The rowHeight prop here is an estimate(average) of the height of each row\n\n    return <VariableList height={350} rowComponent={Row} data={data} rowHeight={80} rowHeights={rowHeights}/>;\n}\n  \nconst Row = React.memo(function (props) {\n    const { data, dataIndex, top, height } = props;\n    const value = data[dataIndex];\n\n    return <div style={{top, height}} className=\"react-recycled-row\">{value}</div>\n});`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport GeneralPage, { randInt } from './GeneralPage';\n\nexport default function VariableColumn() {\n  return <GeneralPage code={code} Demo={VariableColumnDemo} />;\n}\n\nfunction VariableColumnDemo() {\n  const columnsInEachRow = Array(300)\n    .fill(null)\n    .map(() => randInt(1, 4));\n  const totalNumberOfItems = columnsInEachRow.reduce(\n    (acc, column) => column + acc,\n    0\n  );\n  const data = Array(totalNumberOfItems)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList\n      height={400}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      rowColumns={columnsInEachRow}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column, top, height } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const widthMap: any = {\n    1: '100%',\n    2: '50%',\n    3: '33.33%',\n    4: '25%'\n  };\n\n  const columnStyle = {\n    width: widthMap[column],\n    textAlign: 'center'\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle as any}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction VariableColumnDemo() {\n\n    // Define 300 rows of data, each row has a random number of column between 1 and 4\n\n    const columnsInEachRow = Array(300).fill(null).map(() => randInt(1, 4));\n\n    // Calculate the total amount of items/columns in the list\n\n    const totalNumberOfItems = columnsInEachRow.reduce((acc, column) => column + acc, 0);\n\n    // Define the data\n\n    const data = Array(totalNumberOfItems).fill(null).map((_, index) => \\`item \\${index}\\`);\n\n    // It is up to you to define your data and rowColumns, but the total number of columns from rowColumn must be equal to the length of data\n\n    return <FixedList height={400} rowComponent={Row} data={data} rowHeight={100} rowColumns={columnsInEachRow} />\n}\n\nconst Row = React.memo(function (props) {\n\n    // column is the number of column in current row. It can also be calculated as dataEndIndex - dataIndex\n    \n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const widthMap = {\n        1: \"100%\",\n        2: \"50%\",\n        3: \"33.33%\",\n        4: \"25%\"\n    }\n\n    const columnStyle = {\n        width: widthMap[column],\n        textAlign: \"center\",\n    };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from 'react';\nimport Highlight from 'react-highlight.js';\nimport { FullWindowFixedList, RowProps } from 'react-recycled-list';\n\nexport default function FullWindow() {\n  return (\n    <>\n      <div className='code-section half-section'>\n        <div className='code-wrapper'>\n          <Highlight language='js'>{code}</Highlight>\n        </div>\n      </div>\n      <div className='demo-section half-section'>\n        <FullWindowDemo />\n      </div>\n    </>\n  );\n}\n\nfunction FullWindowDemo(props: any) {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100} />;\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FullWindowFixedList, FullWindowVariableList } from \"react-recycled-list\";\n\n// Important! FullWindowFixedList and FullWindowVariableList are not responsive by default!\n// You must wrap in it the responsive container to make it responsive\n\nfunction FullWindowDemo() {\n\n    const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n    // FullWindowFixedList is essentially the same as FixedList but without the height prop\n    // FullWindowVariableList is essentially the same as VariableList but without the height prop\n\n    return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100} />\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n    // the data here is the same data that is passed into the FixedList\n    const { data, dataIndex, top, height } = props;\n\n    const value = data[dataIndex];\n    return <div style={{top, height}} className=\"react-recycled-row\">{value}</div>;\n})`;\n","import React from 'react';\nimport { VariableList, RowProps } from 'react-recycled-list';\nimport GeneralPage, { generateRamdomRowHeightAndColumn } from './GeneralPage';\n\nexport default function VariableRowHeightColumn() {\n  return <GeneralPage code={code} Demo={VariableRowHeightColumnDemo} />;\n}\n\nfunction VariableRowHeightColumnDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const [rowHeights, rowColumns] = generateRamdomRowHeightAndColumn(\n    data.length\n  );\n\n  return (\n    <VariableList\n      height={400}\n      rowComponent={Row}\n      data={data}\n      rowHeight={80}\n      rowColumns={rowColumns}\n      rowHeights={rowHeights}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column, top, height } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const widthMap: any = {\n    1: '100%',\n    2: '50%',\n    3: '33.33%',\n    4: '25%'\n  };\n\n  const columnStyle = {\n    width: widthMap[column],\n    textAlign: 'center'\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle as any}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { VariableList } from \"react-recycled-list\";\n\n// Function for generating randow row heights and columns\n// Each row will have height between 60 and 140 px and column between 1 and 4\nfunction generateRamdomRowHeightAndColumn(dataLength: number) {\n    const heights: number[] = [];\n    const columns: number[] = [];\n    let nextDataIndex = 0;\n    for (let i = 0; nextDataIndex < dataLength; i++) {\n      heights[i] = randInt(60, 140);\n      const column = randInt(1, 4);\n      const tempNextDataIndex = nextDataIndex + column;\n      columns[i] =\n        tempNextDataIndex > dataLength ? dataLength - nextDataIndex : column;\n      nextDataIndex = tempNextDataIndex;\n    }\n  \n    return [heights, columns];\n}\n  \nfunction VariableRowHeightColumnDemo() {\n    const data = Array(totalNumberOfItems).fill(null).map((_, index) => \\`item \\${index}\\`);\n    // For demo purposes I used a random generator. You can however define it whatever you want it to be.\n    // The key takeaway is the length of rowHeights must equal to the length of rowColumns\n    // And the total number of column calculated from rowColumns must be equal to the length of data\n    const [rowHeights, rowColumns] = generateRamdomRowHeightAndColumn(data.length)\n  \n    return <VariableList height={400} rowComponent={Row} data={data} rowHeight={100} rowColumns={rowColumns} rowHeights={rowHeights}/>\n}\n  \nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const widthMap = {\n        1: \"100%\",\n        2: \"50%\",\n        3: \"33.33%\",\n        4: \"25%\"\n    }\n  \n    const columnStyle = {\n        width: widthMap[column],\n        textAlign: \"center\",\n    };\n\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from 'react';\nimport GeneralPage from './GeneralPage';\nimport { FullWindowFixedList, RowProps } from 'react-recycled-list';\n\nexport default function CustomWindow() {\n  return <GeneralPage code={code} Demo={CustomWindowDemo} />;\n}\n\nfunction CustomWindowDemo() {\n  const scrollRef = React.useRef();\n  const listRef = React.useRef<any>();\n  const [_, setComponentHasMounted] = React.useState(false);\n  React.useLayoutEffect(() => {\n    setComponentHasMounted(true);\n    listRef.current.setCustomScrollRef();\n  }, []);\n\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const containerStyle = {\n    height: 500,\n    width: '100%',\n    overflowY: 'scroll' as any\n  };\n\n  const fillerStyle = {\n    textAlign: 'center' as any,\n    padding: 20\n  };\n\n  return (\n    <div ref={scrollRef as any} style={containerStyle}>\n      <div style={fillerStyle}>some random ui</div>\n      <div style={fillerStyle}>some random ui</div>\n      <FullWindowFixedList\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        scrollRef={scrollRef}\n        ref={listRef as any}\n      />\n      <div style={fillerStyle}>some random ui</div>\n      <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FullWindowFixedList, FullWindowVariableList } from \"react-recycled-list\";\n\nfunction CustomWindowDemo() {\n  const scrollRef = React.useRef();\n  const listRef = React.useRef();\n\n  // Important! ref.current is initially undefined. When ref.current is set you must notify FullWindowFixedList or FullWindowVariableList \n  // You can notify it by rerendering or by calling setCustomScrollRef on the list class\n\n  const [_, setComponentHasMounted] = React.useState(false);\n  React.useLayoutEffect(() => {\n    // Once scrollRef.current is set, you must notify the list. You can do it by setState in a useLayoutEffect which cause rerendering\n    setComponentHasMounted(true);\n    // Or you can do it by calling the setCustomScrollRef method on the list\n    listRef.current.setCustomScrollRef();\n    // The reason that useLayoutEffect is used instead of useEffect is because we don't want the browser to paint the empty list (before scrollRef is set)\n  }, []);\n\n  const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n\n  const containerStyle = {\n    height: 500,\n    width: \"100%\",\n    overflowY: \"scroll\",\n  };\n\n  const fillerStyle = {\n    textAlign: \"center\",\n    padding: 20,\n  };\n\n  return (\n    <div ref={ref} style={containerStyle}>\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n              <FullWindowFixedList\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    scrollRef={scrollRef}\n                    ref={listRef}\n              />\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return <div style={{top, height}} className=\"react-recycled-row\">{value}</div>;\n});`;\n","import React from 'react';\nimport { FixedList, RowProps, ResponsiveContainer } from 'react-recycled-list';\nimport GeneralPage from './GeneralPage';\n\nexport default function ResponsiveContainerPage() {\n  return <GeneralPage code={code} Demo={ResponsiveContainerDemo} />;\n}\n\nfunction ResponsiveContainerDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const renderList = (sizeInfo: { width: number; height: number }) => {\n    console.log(sizeInfo);\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FixedList\n        height={height}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        column={column}\n      />\n    );\n  };\n\n  const resizableContainerStyle = {\n    width: '100%',\n    height: '50vh',\n    resize: 'both',\n    overflow: 'auto'\n  };\n\n  return (\n    <div style={resizableContainerStyle as any}>\n      <ResponsiveContainer render={renderList} />\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column, top, height } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: column === 1 ? '100%' : '50%',\n    textAlign: 'center' as any\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { ResponsiveContainer } from \"react-recycled-list\";\n\n// Try resizing the list, the column will change on the 1200px break point\n// The height of the list is set to 50% of the height of the view port\n\nfunction ResponsiveContainerDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n  \n    const renderList = (sizeInfo) => {\n      const { width, height } = sizeInfo;\n      const column = width > 1200 ? 2 : 1;\n      return (\n        <FixedList\n                        height={height}\n                        rowComponent={Row}\n                        data={data}\n                        rowHeight={100}\n                        column={column}\n                />\n      );\n    };\n    // Important! If you want to use padding, then make sure to set box-sizing to border box on the parent element of the ResponsiveContainer\n    const resizableContainerStyle = {\n      width: \"100%\",\n      height: \"50vh\",\n      resize: \"both\",\n      overflow: \"auto\"\n    };\n  \n    return (\n      <div style={resizableContainerStyle}>\n                        <ResponsiveContainer render={renderList} />\n            </div>\n    );\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n      width: column === 1? \"100%\" : \"50%\",\n      textAlign: \"center\",\n    };\n    return (\n      <div style={{top, height}} className=\"react-recycled-row\">\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});`;\n","import React from 'react';\nimport Highlight from 'react-highlight.js';\nimport {\n  FullWindowFixedList,\n  ResponsiveWindowContainer,\n  RowProps\n} from 'react-recycled-list';\n\nexport default function ResponsiveWindowContainerDemoPage() {\n  return (\n    <>\n      <div className='code-section half-section'>\n        <div className='code-wrapper'>\n          <Highlight language='js'>{code}</Highlight>\n        </div>\n      </div>\n      <div className='demo-section half-section'>\n        <ResponsiveWindowContainerDemo />\n      </div>\n    </>\n  );\n}\n\nfunction ResponsiveWindowContainerDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const renderList = (sizeInfo: { width: number; height: number }) => {\n    console.log(sizeInfo);\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FullWindowFixedList\n        windowHeight={height}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        column={column}\n      />\n    );\n  };\n  return <ResponsiveWindowContainer render={renderList} />;\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, column, top, height } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: column === 1 ? '100%' : '50%',\n    textAlign: 'center' as any\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { ResponsiveWindowContainer, FullWindowFixedList } from \"react-recycled-list\";\n\n// Try resizing the window, the column will change on the 1200px break point\n\nfunction ResponsiveWindowContainerDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n  \n    const renderList = (sizeInfo) => {\n      const { width, height } = sizeInfo;\n      const column = width > 1200 ? 2 : 1;\n      return (\n        <FullWindowFixedList\n                        windowHeight={height}\n                        rowComponent={Row}\n                        data={data}\n                        rowHeight={100}\n                        column={column}\n                />\n      );\n    };\n  \n    return <ResponsiveWindowContainer render={renderList} />;\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n      width: column === 1? \"100%\" : \"50%\",\n      textAlign: \"center\",\n    };\n    return (\n      <div style={{top, height}} className=\"react-recycled-row\">\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport GeneralPage from './GeneralPage';\n\nexport default function LazyLoadingAdvanced() {\n  return <GeneralPage code={code} Demo={LazyLoadingDemo} />;\n}\n\nconst numberOfItemPerPage = 20;\nfunction fetchData(page: number, onSuccess: any) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(`item ${i + 1}`);\n    }\n    onSuccess(data, page);\n  }, 1500);\n}\n\nconst initialStore: {\n  data: { [key: string]: any[] };\n  nextPage: number;\n  isLoading: boolean;\n} = {\n  data: {\n    1: Array(numberOfItemPerPage)\n      .fill(null)\n      .map(() => undefined)\n  },\n  nextPage: 1,\n  isLoading: false\n};\n\nfunction LazyLoadingDemo() {\n  const [store, setStore] = React.useState(initialStore);\n\n  const onFetchDataSuccess = (newData: any[], page: number) => {\n    const newStoreData: { [key: string]: any[] } = {\n      ...store.data,\n      [page]: newData\n    };\n    const nextPage = page + 1;\n    const hasNextPage = nextPage <= 5;\n    if (hasNextPage) {\n      newStoreData[nextPage] = [undefined];\n    }\n    setStore({\n      ...store,\n      data: newStoreData,\n      isLoading: false,\n      nextPage: nextPage\n    });\n  };\n\n  React.useEffect(() => {\n    fetchData(store.nextPage, onFetchDataSuccess);\n  }, []);\n\n  const onRenderedRowChange = (renderInfo: {\n    firstRenderedRowIndex: number;\n    firstRenderedDataIndex: number;\n    lastRenderedRowIndex: number;\n    lastRenderedDataIndex: number;\n    lastRowIndex: number;\n  }) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRowIndex,\n      lastRenderedDataIndex\n    } = renderInfo;\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (store.isLoading === false && store.nextPage <= 5) {\n        setStore({ ...store, isLoading: true });\n        fetchData(store.nextPage, onFetchDataSuccess);\n      }\n    }\n  };\n\n  const listData = Object.values(store.data).flat();\n\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={listData}\n      rowHeight={100}\n      onRenderedRowChange={onRenderedRowChange}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? 'loading' : value;\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {displayValue}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\n// This is a rather complicated example\n// The key point is to utilize onRenderedRowChange or onVisibleRowChange to load your data\n\nconst numberOfItemPerPage = 20;\nconst numberOfPages = 5;\n\n// Just a simulation of an API call\nfunction fetchData(page, onSuccess) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    const endDataIndex = startDataIndex + numberOfItemPerPage\n    for (let i = startDataIndex; i < endDataIndex; i++) {\n      data.push(\\`item \\${i + 1}\\`);\n    }\n    onSuccess(data, page);\n  }, 2000);\n}\n\n// Use a map to store the data (you do not have to do the same, the implementation is up to you)\nconst initialStore = {\n  data: { 1: Array(numberOfItemPerPage).fill(null).map(() => undefined) },\n  nextPage: 0,\n  isLoading: false,\n};\n\nfunction LazyLoadingDemo() {\n  const [store, setStore] = React.useState(initialStore);\n\n  const onFetchDataSuccess = (newData, page) => {\n    const newStoreData = { ...store.data, [page]: newData };\n    // For demo purpose I set the max page to be 5\n    const nextPage = page + 1\n    const hasNextPage = nextPage <= numberOfPages;\n    if (hasNextPage) {\n      // If there is a next page, add a empty data item to the next page. This empty data item will be rendered as \"loading...\"\n      newStoreData[nextPage] = [undefined];\n    }\n    setStore({ ...store, data: newStoreData, isLoading: false, nextPage: nextPage });\n  };\n\n  React.useEffect(() => {\n    // Initial fetch\n    fetchData(store.nextPage, onFetchDataSuccess)\n  }, [])\n\n  const onRenderedRowChange = (renderInfo) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRenderedDataIndex,\n      lastRowIndex,\n    } = renderInfo;\n    // If the last row is rendered (NOT visible yet!) and we are not already loading data, we fetch new data\n    // If you want to fetch data when the last row is visible then use onVisibleRowChange\n    if (lastRenderedRowIndex === lastRowIndex) {\n      if (store.isLoading === false) {\n        setStore({ ...store, isLoading: true });\n        fetchData(store.nextPage, onFetchDataSuccess)\n      }\n    }\n  };\n\n  const listData = Object.values(store.data).flat();\n\n  return (\n    <FixedList\n              height={500}\n              rowComponent={Row}\n              data={listData}\n              rowHeight={100}\n              onRenderedRowChange={onRenderedRowChange}\n        />\n  );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div style={{top, height}} className=\"react-recycled-row\">{displayValue}</div>;\n})`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport GeneralPage from './GeneralPage';\n\nexport default function LazyLoadingSimple() {\n  return <GeneralPage code={code} Demo={LazyLoadingDemo} />;\n}\n\nconst numberOfItemPerPage = 20;\nfunction LazyLoadingDemo() {\n  const [data, setData] = React.useState(\n    Array(numberOfItemPerPage)\n      .fill(null)\n      .map((_, index) => `item ${index + 1}`)\n  );\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadData = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      const newData = [...data];\n      const startIndex = data.length;\n      const endIndex = data.length + numberOfItemPerPage;\n      for (let i = startIndex; i < endIndex; i++) {\n        newData.push(`item ${i + 1}`);\n      }\n      setData(newData);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onRenderedRowChange = (renderInfo: {\n    firstRenderedRowIndex: number;\n    firstRenderedDataIndex: number;\n    lastRenderedRowIndex: number;\n    lastRenderedDataIndex: number;\n    lastRowIndex: number;\n  }) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRowIndex,\n      lastRenderedDataIndex\n    } = renderInfo;\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (isLoading === false) {\n        loadData();\n      }\n    }\n  };\n\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      onRenderedRowChange={onRenderedRowChange}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? 'loading' : value;\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {displayValue}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\nconst numberOfItemPerPage = 20;\n\nfunction LazyLoadingDemo() {\n  const [data, setData] = React.useState( Array(numberOfItemPerPage).fill(null).map((_, index) => \\`item \\${index + 1}\\`) );\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadData = () => {\n    setTimeout(() => {\n      const newData = [...data];\n      const startIndex = data.length;\n      const endIndex = data.length + numberOfItemPerPage;\n      for (let i = startIndex; i < endIndex; i++) {\n        newData.push(\\`item \\${i + 1}\\`);\n      }\n      setData(newData);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onRenderedRowChange = (renderInfo) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRenderedDataIndex,\n      lastRowIndex,\n    } = renderInfo;\n    // If the last row is rendered (NOT visible yet!) and we are not already loading data, we fetch new data\n    // If you want to fetch data when the last row is visible then use onVisibleRowChange\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (isLoading === false) {\n        loadData();\n      }\n    }\n  };\n\n  return (\n    <FixedList\n              height={500}\n              rowComponent={Row}\n              data={data}\n              rowHeight={100}\n              onRenderedRowChange={onRenderedRowChange}\n        />\n  );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div style={{top, height}} className=\"react-recycled-row\">{displayValue}</div>;\n})`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport Highlight from 'react-highlight.js';\nimport GeneralPage from './GeneralPage';\nimport { Button } from '@material-ui/core';\n\nexport default function DynamicLoading() {\n  return <GeneralPage code={code} Demo={DynamicLoadingDemo} />;\n}\n\nconst numberOfItemPerPage = 10;\nconst numberOfPages = 10;\nfunction fetchData(page: number, onSuccess: any) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(`item ${i + 1}`);\n    }\n    onSuccess(data, page);\n  }, 1000);\n}\n\ntype PageData = {\n  [key: string]: {\n    isLoading: boolean;\n    hasLoaded: boolean;\n    data: any[];\n  };\n};\n\nfunction populateInitialPage() {\n  const page: PageData = {};\n  for (let i = 1; i <= numberOfPages; i++) {\n    page[i] = {\n      isLoading: false,\n      hasLoaded: false,\n      data: Array(numberOfItemPerPage)\n        .fill(null)\n        .map(() => undefined)\n    };\n  }\n  return page;\n}\nconst initialPagedData = populateInitialPage();\n\nfunction getPageFromDataIndex(index: number) {\n  return Math.floor(index / numberOfItemPerPage) + 1;\n}\n\nfunction DynamicLoadingDemo() {\n  const [pagedData, setPagedData] = React.useState(initialPagedData);\n\n  const onFetchDataSuccess = (newData: any[], page: number) => {\n    setPagedData((pagedData) => {\n      return {\n        ...pagedData,\n        [page]: {\n          data: newData,\n          hasLoaded: true,\n          isLoading: false\n        }\n      };\n    });\n  };\n\n  const onRenderedRowChange = (renderInfo: {\n    firstRenderedRowIndex: number;\n    firstRenderedDataIndex: number;\n    lastRenderedRowIndex: number;\n    lastRenderedDataIndex: number;\n    lastRowIndex: number;\n  }) => {\n    const { firstRenderedDataIndex, lastRenderedDataIndex } = renderInfo;\n\n    const currentTopPage = getPageFromDataIndex(firstRenderedDataIndex);\n    const currentBottomPage = getPageFromDataIndex(lastRenderedDataIndex);\n    const currentPages = [currentTopPage, currentBottomPage];\n\n    if (currentTopPage === currentBottomPage) currentPages.pop();\n\n    currentPages.forEach((page) => {\n      if (!pagedData[page].hasLoaded && !pagedData[page].isLoading) {\n        setPagedData({\n          ...pagedData,\n          [page]: { ...pagedData[page], isLoading: true }\n        });\n\n        fetchData(page, onFetchDataSuccess);\n      }\n    });\n  };\n  const dataList = React.useMemo(\n    () =>\n      Object.values(pagedData)\n        .map(({ data }) => data)\n        .flat(),\n    [pagedData]\n  );\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={dataList}\n      rowHeight={100}\n      onRenderedRowChange={onRenderedRowChange}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? 'loading' : value;\n  return (\n    <div className='react-recycled-row' style={{ top, height }}>\n      {displayValue}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\n// This is a rather complicated example\n// The key point is to paginate your data, and utilize onRenderedRowChange or onVisibleRowChange to load your data\n\nconst numberOfItemPerPage = 10;\nconst numberOfPages = 10;\n// Simulation of an API\nfunction fetchData(page, onSuccess) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(\\`item \\${i + 1}\\`);\n    }\n    onSuccess(data, page);\n  }, 1000);\n}\n\nfunction populateInitialPage() {\n    const page: PageData = {};\n    for (let i = 1; i <= numberOfPages; i++) {\n      page[i] = {\n        isLoading: false,\n        hasLoaded: false,\n        data: Array(numberOfItemPerPage)\n          .fill(null)\n          .map(() => undefined),\n      };\n    }\n    return page;\n}\nconst initialPagedData = populateInitialPage();\n\nfunction getPageFromDataIndex(index: number) {\n    return Math.floor(index / numberOfItemPerPage) + 1;\n}\n  \nfunction DynamicLoadingDemo() {\n    const [pagedData, setPagedData] = React.useState(initialPagedData);\n  \n    const onFetchDataSuccess = (newData, page) => {\n      // Becareful of stale state!\n      setPagedData((pagedData) => {\n        return {\n          ...pagedData,\n          [page]: {\n            data: newData,\n            hasLoaded: true,\n            isLoading: false,\n          },\n        };\n      });\n    };\n  \n    const onRenderedRowChange = (renderInfo) => {\n      const {\n        firstRenderedDataIndex,\n        lastRenderedDataIndex,\n      } = renderInfo;\n  \n      const currentTopPage = getPageFromDataIndex(firstRenderedDataIndex);\n      const currentBottomPage = getPageFromDataIndex(lastRenderedDataIndex);\n      const currentPages = [currentTopPage, currentBottomPage];\n  \n      if (currentTopPage === currentBottomPage) currentPages.pop();\n  \n      currentPages.forEach((page) => {\n        if (!pagedData[page].hasLoaded && !pagedData[page].isLoading) {\n          setPagedData({\n            ...pagedData,\n            [page]: { ...pagedData[page], isLoading: true },\n          });\n          fetchData(page, onFetchDataSuccess);\n        }\n      });\n    };\n    const dataList = Object.values(pagedData).map(({ data }) => data).flat();\n\n    return (\n      <FixedList\n                    height={500}\n                    rowComponent={Row}\n                    data={dataList}\n                    rowHeight={100}\n                    onRenderedRowChange={onRenderedRowChange}\n            />\n    );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? \"loading\" : value;\n  return <div style={{top, height}} className=\"react-recycled-row\">{displayValue}</div>;\n})`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\n\nimport GeneralPage from './GeneralPage';\n\nexport default function ScrollIndicator() {\n  return <GeneralPage code={code} Demo={ScrollIndicatorDemo} />;\n}\n\nfunction ScrollIndicatorDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      useScrollIndicator\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, isScrolling, top, height } = props;\n  const value = isScrolling ? 'scrolling' : data[dataIndex];\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\n// If your row component is expensive to render, you can consider rendering a lighter component when scrolling\n\nfunction ScrollIndicatorDemo() {\n  const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} useScrollingIndicator/>\n}\n\nconst Row = React.memo(function (props: RowProps) {\n    const { data, dataIndex, isScrolling, top, height } = props;\n    const value = isScrolling? \"scrolling\" : data[dataIndex];\n    return <div style={{top, height}} className=\"react-recycled-row\">{value}</div>;\n});`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport GeneralPage from './GeneralPage';\nimport { Button } from '@material-ui/core';\n\nexport default function ScrollTo() {\n  return <GeneralPage code={code} Demo={ScrollToDemo} />;\n}\n\nfunction ScrollToDemo() {\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n  const ref = React.useRef<FixedList>() as React.RefObject<FixedList>;\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-evenly',\n          alignItems: 'center',\n          padding: 10\n        }}\n      >\n        <Button\n          variant='contained'\n          color='secondary'\n          style={{ textTransform: 'none' }}\n          onClick={() => ref.current?.scrollTo(350)}\n        >\n          Scroll to scrollTop 350\n        </Button>\n        <Button\n          variant='contained'\n          color='secondary'\n          style={{ textTransform: 'none' }}\n          onClick={() => ref.current?.scrollToRow(9)}\n        >\n          Scroll to 10th row\n        </Button>\n        <Button\n          variant='contained'\n          color='secondary'\n          style={{ textTransform: 'none' }}\n          onClick={() => ref.current?.scrollToRow(-1)}\n        >\n          Scroll to last row\n        </Button>\n        <Button\n          variant='contained'\n          color='secondary'\n          style={{ textTransform: 'none' }}\n          onClick={() => ref.current?.scrollToDataIndex(86)}\n        >\n          Scroll to 87th data\n        </Button>\n      </div>\n      <FixedList\n        height={300}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        column={4}\n        ref={ref}\n      />\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, top, height } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: '25%',\n    textAlign: 'center'\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle as any}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} column={4} ref={ref}/>\n                </div>\n    )\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n        width: \"25%\",\n        textAlign: \"center\",\n    };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n","import React from 'react';\nimport GeneralPage from './GeneralPage';\nimport { FixedSizeList } from 'react-window';\nimport { Avatar, Chip } from '@material-ui/core';\nimport { areEqual } from 'react-window';\n\nexport default function ReactWindowComparison() {\n  return <GeneralPage code={code} Demo={ReactWindowDemo} />;\n}\n\nexport function ReactWindowDemo() {\n  const data = Array(500)\n    .fill(null)\n    .map((_, index) => index);\n  // const [heights, columns] = generateRamdomRowHeightAndColumn(data.length);\n  return (\n    <div className='App'>\n      <FixedSizeList\n        height={800}\n        itemSize={100}\n        width='100%'\n        itemCount={data.length}\n      >\n        {ReactWindowRow}\n      </FixedSizeList>\n    </div>\n  );\n}\n\nconst ReactWindowRow = React.memo(function (props: any) {\n  const { index, style } = props;\n  const handleClick = () => {};\n  return (\n    <div className='react-recycled-row' style={style}>\n      {chips.map((_, index) => (\n        <Chip\n          key={index}\n          avatar={<Avatar>M</Avatar>}\n          label='Clickable'\n          onClick={handleClick}\n        />\n      ))}\n    </div>\n  );\n}, areEqual);\n\nconst chips = Array(15)\n  .fill(null)\n  .map(() => undefined);\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nfunction SimpleListDemo() {\n\n  const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100}/>\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex, style } = props;\n\n  // Note, the css you see in the demo above is not defined here, check the code sandbox for more\n\n  const value = data[dataIndex];\n  return <div style={style} className=\"react-recycled-row\">{value}</div>;\n})`;\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport {\n  AppBar,\n  Avatar,\n  Box,\n  Chip,\n  Tab,\n  Tabs,\n  Typography\n} from '@material-ui/core';\nimport { ReactWindowDemo } from './ReactWindowComparison';\nimport { Alert } from '@material-ui/lab';\n\nexport function TabPanel(props: any) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default function Performance() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='With react-recycled-list' />\n          <Tab label='Without react-recycled-list' />\n          <Tab label='With react-window' />\n        </Tabs>\n      </AppBar>\n      <Box p={3} pb={1}>\n        <Alert\n          severity='warning'\n          variant='filled'\n          style={{ justifyContent: 'center' }}\n        >\n          Warning, using a production build will give you much better\n          performance. To test react-recycled-list to the extreme, turn on CPU\n          throttle in google developer tool\n        </Alert>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <PerformanceDemo />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <NoOptimization />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <ReactWindowDemo />\n      </TabPanel>\n    </div>\n  );\n}\n\nfunction PerformanceDemo() {\n  const data = Array(500)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  return (\n    <FixedList height={800} rowComponent={Row} data={data} rowHeight={100} />\n  );\n}\n\nconst chips = Array(15)\n  .fill(null)\n  .map(() => undefined);\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const handleClick = () => {};\n  return (\n    <div style={{ top, height } as any} className='react-recycled-row'>\n      {chips.map((_, index) => (\n        <Chip\n          key={index}\n          avatar={<Avatar>M</Avatar>}\n          label='Clickable'\n          onClick={handleClick}\n        />\n      ))}\n    </div>\n  );\n});\n\nconst data = Array(500)\n  .fill(null)\n  .map((_, index) => undefined);\n\nfunction NoOptimization() {\n  const handleClick = () => {};\n  return (\n    <div className='no-optimization-list'>\n      {data.map((_, index) => (\n        <div\n          className='react-none-recycled-row'\n          key={index}\n          style={{ height: 100 }}\n        >\n          {chips.map((_, chipIndex) => (\n            <Chip\n              key={chipIndex}\n              avatar={<Avatar>M</Avatar>}\n              label='Clickable'\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { FixedList, RowProps } from 'react-recycled-list';\nimport Highlight from 'react-highlight.js';\nimport { AppBar, Box, Tab, Tabs, Typography } from '@material-ui/core';\n\nfunction TabPanel(props: any) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default function ScrollRestoration() {\n  const [value, setValue] = React.useState(0);\n  const [prevScrol, setPrevScrollTop] = React.useState(0);\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='tab 1' />\n          <Tab label='tab 2' />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <div className='demo-section half-section'>\n          <SimpleList\n            initialScrollTop={prevScrol}\n            setPrevScrollTop={setPrevScrollTop}\n          />\n        </div>\n        <div className='code-section half-section'>\n          <div className='code-wrapper'>\n            <Highlight language='js'>{code}</Highlight>\n          </div>\n        </div>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <Typography variant='h6'>\n          Go back to tab 1 and the scroll position should restore\n        </Typography>\n      </TabPanel>\n    </div>\n  );\n}\n\nfunction SimpleList(props: any) {\n  const { setPrevScrollTop, initialScrollTop } = props;\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const onUnmount = (scrollTop: number) => {\n    setPrevScrollTop(scrollTop);\n  };\n\n  return (\n    <FixedList\n      height={500}\n      rowComponent={Row}\n      data={data}\n      rowHeight={100}\n      initialScrollTop={initialScrollTop}\n      onUnmount={onUnmount}\n    />\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {value}\n    </div>\n  );\n});\n\nconst code = `import { FixedList } from \"react-recycled-list\";\n\nexport default function Tabs() {\n    // App bar and tab navigation are not included in the code here\n    const [prevScrol, setPrevScrollTop] = React.useState(0);\n    return (\n      <div>\n                    <TabPanel value={value} index={0}>\n                            <ScrollRestorationDemo\n                                initialScrollTop={prevScrol}\n                                setPrevScrollTop={setPrevScrollTop}\n                            />\n                    </TabPanel>\n                    <TabPanel value={value} index={1}>\n                            Go back to tab 1 and the scroll position should restore\n                    </TabPanel>\n            </div>\n    );\n  }\n\nfunction ScrollRestorationDemo( props ) {\n    const { setPrevScrollTop, initialScrollTop } = props;\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n  \n    const onUnmount = (scrollTop: number) => {\n      setPrevScrollTop(scrollTop);\n    };\n  \n    return (\n      <FixedList\n                    height={500}\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    initialScrollTop={initialScrollTop}\n                    onUnmount={onUnmount}\n                />\n    );\n  }\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex, top, height } = props;\n\n  const value = data[dataIndex];\n  // Important!, make sure you inline-style your component with the the provided top, height. Also make sure to set your container element to position absolute\n  return <div style={{top, height}} className=\"react-recycled-row\">{value}</div>;\n})`;\n","import React from 'react';\nimport Highlight from 'react-highlight.js';\n\nexport default function SSR() {\n  return (\n    <>\n      <div className='code-section half-section'>\n        <div className='code-wrapper'>\n          <Highlight language='js'>{code}</Highlight>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst code = `import { FullWindowFixedList } from \"react-recycled-list\";\n\nfunction FullWindowDemo() {\n\n    const data = Array(1000).fill(null).map((_, index) => \\`index \\${index}\\`);\n\n    // FixedList and VariableList supports SSR out of the box\n    // However for FullWindowFixedList and FullWindowVariableList you must provide a prop called serverSideHeight that determines the initial render height\n    // For example if serverSideHeight is 1000 and your row height is 100, then there will be 10 (visible row) + 2 (off screen row by default) rendered in the server\n    // Once the component loads on a web page the component will automatically adjust its height and rows to fit the window\n\n    return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100} serverSideHeight={1080}/>\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n      width: column === 1? \"100%\" : \"50%\",\n      textAlign: \"center\",\n    };\n    return (\n      <div style={{top, height}} className=\"react-recycled-row\">\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});`;\n","import { Box, Typography } from '@material-ui/core';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nexport default function BeforeYouBegin() {\n  return (\n    <div className='why-page'>\n      <Box p={3} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          Make sure to style/position your component correctly!\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          react-recycled-list uses absolute positioning to position its list\n          items. You must use the style provided by react-recycled-list on your\n          row component:\n        </Typography>\n      </Box>\n      <Box pb={0} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Box p={3} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          Performance is slower than expected?\n        </Typography>\n      </Box>\n      <Box p={3} pt={2} pb={1} pl={5} pr={5}>\n        <Typography variant='body1'>\n          It is important to memoize your row component, especially if your row\n          component is expensive to render. You can do so by using React.memo or\n          extending pure component:\n        </Typography>\n      </Box>\n      <Box pb={0} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{code2}</Highlight>\n      </Box>\n      <Box p={3} pt={2} pb={1} pl={5} pr={5}>\n        <Typography variant='body1'>\n          If you still find the performance slower than expected, then it is\n          likely because you are in development mode and have react dev\n          extensions enabled. Make sure to use a produciton build and use a\n          incognito window to benchmark.\n        </Typography>\n      </Box>\n      <Box p={3} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          A note about benchmarking performance\n        </Typography>\n      </Box>\n      <Box p={3} pt={2} pb={1} pl={5} pr={5}>\n        <Typography variant='body1'>\n          It is recommended to use{' '}\n          <a href='https://github.com/mrdoob/stats.js/' target='blank'>\n            Stats.js\n          </a>{' '}\n          to monitor fps in real time. You can also use the performance monitor\n          in google developer tool to inspect scripting and rendering time.\n        </Typography>\n      </Box>\n      <Box p={3} pt={2} pb={1} pl={5} pr={5}>\n        <Typography variant='body1'>\n          To simulate scrolling on devices with low-end hardware, turn on CPU\n          throttling in performance tab under google devloper tool. As mentioned\n          above, all benchmark should be conducted using a production build.\n        </Typography>\n      </Box>\n    </div>\n  );\n}\n\nconst code1 = `const Row = React.memo(function (props) {\n  const { data, dataIndex, top, height } = props;\n  const style={\n      position: \"absolute\",\n      top,\n      height.\n  }\n  return <div style={style}>{data[dataIndex]}</div>;\n})\n\n// or\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex, top, height } = props;\n    // the css class \"row\" contains position: absolute\n    return <div style={{top, height}} className=\"row\">{data[dataIndex]}</div>;\n})`;\n\nconst code2 = `const Row = React.memo(function (props) {\n    const { data, dataIndex, top, height } = props;\n    // the css class \"row\" contains position: absolute\n    return <div style={{top, height}} className=\"row\">{data[dataIndex]}</div>;\n})`;\n","import { AppBar, Box, Divider, Tab, Tabs, Typography } from '@material-ui/core';\nimport { TabPanel } from './Performance';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nimport listPropsImg from './listProps.png';\n\nexport default function FixedListDoc() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='Props' />\n          <Tab label='Methods' />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <FixedListDocProps />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <FixedListMethods />\n      </TabPanel>\n    </div>\n  );\n}\nexport function FixedListDocProps() {\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          data: Array{'<any>'}, <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An array of data items used to populate your row components. This will\n          be passed to your row component as prop.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{dataCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowComponent: React component,{' '}\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Your react component for rendering each row. Make sure to memoize it\n          and style it correctly with absolute positioning. It will receive the\n          following props:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>top:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style top used to position your row component in\n              the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>height:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style height used to position your row component\n              in the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>data:</span>\n            </Typography>\n          </li>\n          <Box p={1} pl={3}>\n            <Typography variant='body1'>\n              The same data prop you passed into the FixedList component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the data item that this row should render. If you are\n              using a grid, then this is the index of the first data item in\n              this row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataEndIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the index of the data item that the next row should\n              render. This prop is usefull if you are using a grid. Using\n              data.slice(dataIndex, dataEndIndex) will give you the list of data\n              items rendered for this row. For example, if dataIndex is 10 and\n              dataEndIndex is 12, then your row should render 2 items with data\n              index 10 and 11.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>isScrolling:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              Indicate if the current row is being scrolled. If your component\n              is very expensive to render and the user is scrolling fast, you\n              can render a lighter component to increase performance. When the\n              user stops scrolling then you can render the full component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>column:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              How many column/data item does this row have. Is is calculated as\n              dataEndIndex - dataIndex. If you are not using a grid, then this\n              will always be 1.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>row:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the current row. For example, if row = 0 then it\n              means your component is responsible for rendering the first row in\n              the list.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The heigh of each row in the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          height:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number,\n          </span>{' '}\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>The height of the list.</Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          column:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many data item each row should render.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowColumns:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<number>'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          This is for variable column grid. rowColumns is a list of number that\n          defines how many column each row should have. Note the sum of\n          rowColumns must be equal to the length of the data.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowColumnsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          offScreenRow:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 1\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many rows are rendered off screen in each direction. By default\n          there are 2 rows rendered off screen (1 in each direction). Increasing\n          the number of rows rendered off screen may reduce flickering in fast\n          scroll (when the user scrolls too fast and the render cannot keep up).\n          however, it does come with a performance cost.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onRenderedRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(renderInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the rendered row has changed\n          (when any row is recycled). Usefull for loading data. It will receive\n          a object parameter that contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{onRenderedRowChangeCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onVisibleRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(visibilityInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever any visible row is changed.\n          Usefull for loading data. It will receive a object parameter that\n          contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onUnmount:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(scrollTop: number) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the list component is\n          unmounted. Usefull for scroll restoration in combination with\n          initialScrollTop.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          initialScrollTop:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 0\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The initial scroll position of the list when first rendered. If\n          initialScrollTop = -1, then the list will scroll to the bottom. Note\n          the initialScrollTop here is relative to the top of the list, meaning\n          that initialScrollTop = 0 will scroll to the first row in the list. It\n          will not scroll to the top of the window.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          useScrollingIndicator:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            boolean, default = false\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          Wheather of not to use scroll indicator. If set to yes, then your row\n          component will receive a prop called isScrolling which indicate if the\n          current row is being scrolled.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 250\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the user stops scrolling, before\n          setting isScrolling to false.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listTagName:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string, default = \"div\"\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The tag name assigned to the full height list\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listProps:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            object, default = {'{}'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The props assigned to the full list element. Usefull for assigning\n          className or accessibility properties. Note that you cannot assign\n          style to it.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{listPropsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <img src={listPropsImg} style={{ height: 200 }} />\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listWindowTagName:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string, default = \"div\"\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The tag name assigned to the list window\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listWindowProps:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            object, default = {'{}'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The props assigned to the list window. Usefull for assigning className\n          or accessibility properties. Note that you cannot assign style to it.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          width:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string | number, default = {`\"100%\"`}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={3} pl={5} pr={5}>\n        <Typography variant='body1'>\n          the width assigned to the list window.\n        </Typography>\n      </Box>\n    </div>\n  );\n}\n\nexport function FixedListMethods(props: any) {\n  const { code } = props;\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code || methodsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollTo(scrollTop: number): void\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Scroll to the specified position according to the scrollTop value\n          provided. Put scrollTop = -1 to scroll to the bottom of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollToRow(targetRowIndex: number): void\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Scroll to the specified row. Note the index starts at 0. Put\n          targetRowIndex = -1 to scroll to the last row of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollToDataIndex(targetDataIndex: number): void\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Scroll to the specified row that contains the target data index. Note\n          the index starts at 0. Put scrollToDataIndex = -1 to scroll to the\n          last data item of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n    </div>\n  );\n}\n\nconst code1 = `import { FixedList } from \"react-recycled-list;`;\n\nconst dataCode = `const data = [{firstName: \"a\", lastName: \"b\"}, {firstName: \"c\", lastName: \"d\"}, {firstName: \"e\", lastName: \"f\"}];\nfunction MyList() {\n    //...\n    return <FixedList data={data} .../>\n}`;\n\nconst rowCode = `const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: \"25%\", textAlign: \"center\" };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n\nconst rowColumnsCode = `function MyList() {\n    //...\n    const data = [\"item 1\", \"item 2\", \"item 3\", \"item 4\", \"item 5\", \"item 6\",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <FixedList data={data} rowColumns={rowColumns} .../>\n}`;\n\nconst onRenderedRowChangeCode = `function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <FixedList onRenderedRowChange={onRenderedRowChange} .../>\n}`;\n\nconst listPropsCode = `function MyList() {\n    //...\n    return <FixedList listProps={{className: \"myList\"}} .../>\n}`;\n\nconst methodsCode = `function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}`;\n","import { AppBar, Box, Divider, Tab, Tabs, Typography } from '@material-ui/core';\nimport { TabPanel } from './Performance';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nimport listPropsImg from './listProps.png';\nimport { FixedListDocProps, FixedListMethods } from './FixedListDoc';\n\nexport default function VariableListDoc() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='Props' />\n          <Tab label='Methods' />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <VariableListDocProps />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <FixedListMethods code={methodsCode} />\n      </TabPanel>\n    </div>\n  );\n}\nfunction VariableListDocProps() {\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          data:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<any>'},{' '}\n          </span>\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An array of data items used to populate your row components. This will\n          be passed to your row component as prop.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{dataCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowHeights:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {' '}\n            Array{'<number>'},{' '}\n          </span>\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An array of number definining the height of each row. The length of\n          rowHeights must match the total number of rows computed from data. For\n          example, if you are not using column, then the length of rowHeights\n          must be the same as the length of data. If you are using a fixed\n          amount of column, then the length of rowHeights must be the same as\n          Math.ceil(data.length / column).\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowHeightsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowHeight:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number,\n          </span>{' '}\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An estimate of the height of each row in the list. This is used to\n          determine how many rows to render. You should always underestimate\n          this value to ensure that there are enough rows rendered. For example,\n          if you rows are between 60px - 140px height, then use 80 as the\n          estimated row height.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowComponent:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {' '}\n            React component,{' '}\n          </span>\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Your react component for rendering each row. Make sure to memoize it\n          and style it correctly with absolute positioning. It will receive the\n          following props:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>top:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style top used to position your row component in\n              the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>height:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style height used to position your row component\n              in the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>data:</span>\n            </Typography>\n          </li>\n          <Box p={1} pl={3}>\n            <Typography variant='body1'>\n              The same data prop you passed into the VariableList component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the data item that this row should render. If you are\n              using a grid, then this is the index of the first data item in\n              this row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataEndIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the index of the data item that the next row should\n              render. This prop is usefull if you are using a grid. Using\n              data.slice(dataIndex, dataEndIndex) will give you the list of data\n              items rendered for this row. For example, if dataIndex is 10 and\n              dataEndIndex is 12, then your row should render 2 items with data\n              index 10 and 11.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>isScrolling:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              Indicate if the current row is being scrolled. If your component\n              is very expensive to render and the user is scrolling fast, you\n              can render a lighter component to increase performance. When the\n              user stops scrolling then you can render the full component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>column:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              How many column/data item does this row have. Is is calculated as\n              dataEndIndex - dataIndex. If you are not using a grid, then this\n              will always be 1.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>row:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the current row. For example, if row = 0 then it\n              means your component is responsible for rendering the first row in\n              the list.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          height:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number,\n          </span>{' '}\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>The height of the list.</Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          column:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many data item each row should render.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowColumns:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<number>'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          This is for variable column grid. rowColumns is a list of number that\n          defines how many column each row should have. Note the sum of\n          rowColumns must be equal to the length of the data.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowColumnsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          offScreenRow:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 1\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many rows are rendered off screen in each direction. By default\n          there are 2 rows rendered off screen (1 in each direction). Increasing\n          the number of rows rendered off screen may reduce flickering in fast\n          scroll (when the user scrolls too fast and the render cannot keep up).\n          however, it does come with a performance cost.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onRenderedRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(renderInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the rendered row has changed\n          (when any row is recycled). Usefull for loading data. It will receive\n          a object parameter that contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{onRenderedRowChangeCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onVisibleRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(visibilityInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever any visible row is changed.\n          Usefull for loading data. It will receive a object parameter that\n          contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onUnmount:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(scrollTop: number) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the list component is\n          unmounted. Usefull for scroll restoration in combination with\n          initialScrollTop.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          initialScrollTop:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 0\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The initial scroll position of the list when first rendered. If\n          initialScrollTop = -1, then the list will scroll to the bottom. Note\n          the initialScrollTop here is relative to the top of the list, meaning\n          that initialScrollTop = 0 will scroll to the first row in the list. It\n          will not scroll to the top of the window.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          useScrollingIndicator:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            boolean, default = false\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          Wheather of not to use scroll indicator. If set to yes, then your row\n          component will receive a prop called isScrolling which indicate if the\n          current row is being scrolled.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 250\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the user stops scrolling, before\n          setting isScrolling to false.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listTagName:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string, default = \"div\"\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The tag name assigned to the full height list\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listProps:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            object, default = {'{}'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The props assigned to the full list element. Usefull for assigning\n          className or accessibility properties. Note that you cannot assign\n          style to it.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{listPropsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <img src={listPropsImg} style={{ height: 200 }} />\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listWindowTagName:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string, default = \"div\"\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The tag name assigned to the list window\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listWindowProps:\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            object, default = {'{}'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The props assigned to the list window. Usefull for assigning className\n          or accessibility properties. Note that you cannot assign style to it.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          width:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string | number, default = {`\"100%\"`}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={3} pl={5} pr={5}>\n        <Typography variant='body1'>\n          the width assigned to the list window.\n        </Typography>\n      </Box>\n    </div>\n  );\n}\n\nconst rowHeightsCode = `function MyList() {\n    //...\n    const data = [\"A short item\", \"A longgggggg item\", \"A longggg item\"];\n    // Total of 3 rows. First row has height 50px, second row has height 150px, and third row has height 100px\n    const rowHeights = [50,150,100];\n    return <VariableList rowHeights={rowHeights} .../>\n}`;\n\nconst code1 = `import { VariableList } from \"react-recycled-list;`;\n\nconst dataCode = `const data = [{firstName: \"a\", lastName: \"b\"}, {firstName: \"c\", lastName: \"d\"}, {firstName: \"e\", lastName: \"f\"}];\nfunction MyList() {\n    //...\n    return <VariableList data={data} .../>\n}`;\n\nconst rowCode = `const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: \"25%\", textAlign: \"center\" };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n\nconst rowColumnsCode = `function MyList() {\n    //...\n    const data = [\"item 1\", \"item 2\", \"item 3\", \"item 4\", \"item 5\", \"item 6\",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <VariableList data={data} rowColumns={rowColumns} .../>\n}`;\n\nconst onRenderedRowChangeCode = `function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <VariableList onRenderedRowChange={onRenderedRowChange} .../>\n}`;\n\nconst listPropsCode = `function MyList() {\n    //...\n    return <VariableList listProps={{className: \"myList\"}} .../>\n}`;\n\nconst methodsCode = `function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <VariableList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}`;\n","import { AppBar, Box, Divider, Tab, Tabs, Typography } from '@material-ui/core';\nimport { TabPanel } from './Performance';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nimport { Link } from 'react-router-dom';\n\nexport default function FullWindowFixedListDoc() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='Props' />\n          <Tab label='Methods' />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <FullWindowFixedListDocProps />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <FullWindowFixedListMethods />\n      </TabPanel>\n    </div>\n  );\n}\nexport function FullWindowFixedListDocProps() {\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          data:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<any>'}\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An array of data items used to populate your row components. This will\n          be passed to your row component as prop.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{dataCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowComponent:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            React component\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Your react component for rendering each row. Make sure to memoize it\n          and style it correctly with absolute positioning. It will receive the\n          following props:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>top:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style top used to position your row component in\n              the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>height:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style height used to position your row component\n              in the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>data:</span>\n            </Typography>\n          </li>\n          <Box p={1} pl={3}>\n            <Typography variant='body1'>\n              The same data prop you passed into the FullWindowFixedList\n              component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the data item that this row should render. If you are\n              using a grid, then this is the index of the first data item in\n              this row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataEndIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the index of the data item that the next row should\n              render. This prop is usefull if you are using a grid. Using\n              data.slice(dataIndex, dataEndIndex) will give you the list of data\n              items rendered for this row. For example, if dataIndex is 10 and\n              dataEndIndex is 12, then your row should render 2 items with data\n              index 10 and 11.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>isScrolling:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              Indicate if the current row is being scrolled. If your component\n              is very expensive to render and the user is scrolling fast, you\n              can render a lighter component to increase performance. When the\n              user stops scrolling then you can render the full component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>column:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              How many column/data item does this row have. Is is calculated as\n              dataEndIndex - dataIndex. If you are not using a grid, then this\n              will always be 1.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>row:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the current row. For example, if row = 0 then it\n              means your component is responsible for rendering the first row in\n              the list.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The heigh of each row in the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollRef:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            React ref object, default = window\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Element used to attach scroll listener. See{' '}\n          <Link to='/custom-window'>this example</Link> for more detail.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rootMarginTop:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Amount of space considered invisible at top. Useful when you have a\n          fixed position header that blocks some top part of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rootMarginBottom:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Amount of space considered invisible at bottom. Useful when you have a\n          fixed position footer that blocks the some bottom part of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          windowHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          No real effect. This is used in conjunction with\n          ResponsiveWindowContainer to force rerender when window size change.\n          See <Link to='/responsive-window'>this example</Link> for more detail.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          serverSideHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Used for server side rendering. This specify the height of the list\n          when rendered in the server side(otherwise would be 0).\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          column:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many data item each row should render.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowColumns:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<number>'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          This is for variable column grid. rowColumns is a list of number that\n          defines how many column each row should have. Note the sum of\n          rowColumns must be equal to the length of the data.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowColumnsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          offScreenRow:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 1\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many rows are rendered off screen in each direction. By default\n          there are 2 rows rendered off screen (1 in each direction). Increasing\n          the number of rows rendered off screen may reduce flickering in fast\n          scroll (when the user scrolls too fast and the render cannot keep up).\n          however, it does come with a performance cost.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onRenderedRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(renderInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the rendered row has changed\n          (when any row is recycled). Usefull for loading data. It will receive\n          a object parameter that contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{onRenderedRowChangeCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onVisibleRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(visibilityInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever any visible row is changed.\n          Usefull for loading data. It will receive a object parameter that\n          contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onUnmount:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(scrollTop: number) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the list component is\n          unmounted. Usefull for scroll restoration in combination with\n          initialScrollTop.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          initialScrollTop:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 0\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The initial scroll position of the list when first rendered. If\n          initialScrollTop = -1, then the list will scroll to the bottom. Note\n          the initialScrollTop here is relative to the top of the list, meaning\n          that initialScrollTop = 0 will scroll to the first row in the list. It\n          will not scroll to the top of the window.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          useScrollingIndicator:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            boolean, default = false\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          Wheather of not to use scroll indicator. If set to yes, then your row\n          component will receive a prop called isScrolling which indicate if the\n          current row is being scrolled.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 250\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the user stops scrolling, before\n          setting isScrolling to false.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listTagName:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string, default = \"div\"\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The tag name assigned to the full height list\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listProps:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            object, default = {'{}'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The props assigned to the full list element. Usefull for assigning\n          className or accessibility properties. Note that you cannot assign\n          style to it.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{listPropsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          width:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string | number, default = {`\"100%\"`}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={3} pl={5} pr={5}>\n        <Typography variant='body1'>\n          the width assigned to the list window.\n        </Typography>\n      </Box>\n    </div>\n  );\n}\nconst code1 = `import { FullWindowFixedList } from \"react-recycled-list;`;\n\nconst dataCode = `const data = [{firstName: \"a\", lastName: \"b\"}, {firstName: \"c\", lastName: \"d\"}, {firstName: \"e\", lastName: \"f\"}];\nfunction MyList() {\n    //...\n    return <FullWindowFixedList data={data} .../>\n}`;\n\nconst rowCode = `const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: \"25%\", textAlign: \"center\" };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n\nconst rowColumnsCode = `function MyList() {\n    //...\n    const data = [\"item 1\", \"item 2\", \"item 3\", \"item 4\", \"item 5\", \"item 6\",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <FullWindowFixedList data={data} rowColumns={rowColumns} .../>\n}`;\n\nconst onRenderedRowChangeCode = `function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <FullWindowFixedList onRenderedRowChange={onRenderedRowChange} .../>\n}`;\n\nconst listPropsCode = `function MyList() {\n    //...\n    return <FullWindowFixedList listProps={{className: \"myList\"}} .../>\n}`;\n\nconst methodsCode = `function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FullWindowFixedList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}`;\n\nexport function FullWindowFixedListMethods(props: any) {\n  const { code } = props;\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code || methodsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollTo(scrollTop: number): void\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Scroll to the specified position according to the scrollTop value\n          provided. Put scrollTop = -1 to scroll to the bottom of the list. Note\n          the scrollTop here is relative to the top of the list, meaning that\n          scrollTop = 0 will scroll to the first row in the list. It will not\n          scroll to the top of the window.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollToRow(targetRowIndex: number): void\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Scroll to the specified row. Note the index starts at 0. Put\n          targetRowIndex = -1 to scroll to the last row of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollToDataIndex(targetDataIndex: number): void\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Scroll to the specified row that contains the target data index. Note\n          the index starts at 0. Put scrollToDataIndex = -1 to scroll to the\n          last data item of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          setCustomScrollRef(): void\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          If you are using a custom scroll window instead of the default global\n          window, then you call this method once your scrollRef is set (i.e.\n          ref.current is set to the appropiate element). See{' '}\n          <Link to='./custom-window'>this example</Link> for more detail.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n    </div>\n  );\n}\n","import { AppBar, Box, Divider, Tab, Tabs, Typography } from '@material-ui/core';\nimport { TabPanel } from './Performance';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nimport { FullWindowFixedListMethods } from './FullWindowFixedListDoc';\nimport { Link } from 'react-router-dom';\n\nexport default function FullWindowVariableListDoc() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: any, newValue: any) => {\n    setValue(newValue);\n  };\n  return (\n    <div>\n      <AppBar position='static'>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label='simple tabs example'\n        >\n          <Tab label='Props' />\n          <Tab label='Methods' />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <FullWindowVariableListDocProps />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <FullWindowFixedListMethods code={methodsCode} />\n      </TabPanel>\n    </div>\n  );\n}\nexport function FullWindowVariableListDocProps() {\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          data:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<any>'}\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An array of data items used to populate your row components. This will\n          be passed to your row component as prop.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{dataCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowHeights:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<number>'},{' '}\n          </span>\n          <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          An array of number definining the height of each row. The length of\n          rowHeights must match the total number of rows computed from data. For\n          example, if you are not using column, then the length of rowHeights\n          must be the same as the length of data. If you are using a fixed\n          amount of column, then the length of rowHeights must be the same as\n          Math.ceil(data.length / column).\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowHeightsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowComponent:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            React component\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Your react component for rendering each row. Make sure to memoize it\n          and style it correctly with absolute positioning. It will receive the\n          following props:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>top:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style top used to position your row component in\n              the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>height:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the css style height used to position your row component\n              in the list.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>data:</span>\n            </Typography>\n          </li>\n          <Box p={1} pl={3}>\n            <Typography variant='body1'>\n              The same data prop you passed into the FullWindowFixedList\n              component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the data item that this row should render. If you are\n              using a grid, then this is the index of the first data item in\n              this row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>dataEndIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              This is the index of the data item that the next row should\n              render. This prop is usefull if you are using a grid. Using\n              data.slice(dataIndex, dataEndIndex) will give you the list of data\n              items rendered for this row. For example, if dataIndex is 10 and\n              dataEndIndex is 12, then your row should render 2 items with data\n              index 10 and 11.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>isScrolling:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              Indicate if the current row is being scrolled. If your component\n              is very expensive to render and the user is scrolling fast, you\n              can render a lighter component to increase performance. When the\n              user stops scrolling then you can render the full component.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>column:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              How many column/data item does this row have. Is is calculated as\n              dataEndIndex - dataIndex. If you are not using a grid, then this\n              will always be 1.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>row:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The index of the current row. For example, if row = 0 then it\n              means your component is responsible for rendering the first row in\n              the list.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The heigh of each row in the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollRef:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            React ref object, default = window\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Element used to attach scroll listener. See{' '}\n          <Link to='/custom-window'>this example</Link> for more detail.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rootMarginTop:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Amount of space considered invisible at top. Useful when you have a\n          fixed position header that blocks some top part of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rootMarginBottom:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Amount of space considered invisible at bottom. Useful when you have a\n          fixed position footer that blocks the some bottom part of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          windowHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          No real effect. This is used in conjunction with\n          ResponsiveWindowContainer to force rerender when window size change.\n          See <Link to='/responsive-window'>this example</Link> for more detail.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          serverSideHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Used for server side rendering. This specify the height of the list\n          when rendered in the server side(otherwise would be 0).\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          column:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many data item each row should render.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          rowColumns:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            Array{'<number>'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          This is for variable column grid. rowColumns is a list of number that\n          defines how many column each row should have. Note the sum of\n          rowColumns must be equal to the length of the data.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{rowColumnsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          offScreenRow:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 1\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many rows are rendered off screen in each direction. By default\n          there are 2 rows rendered off screen (1 in each direction). Increasing\n          the number of rows rendered off screen may reduce flickering in fast\n          scroll (when the user scrolls too fast and the render cannot keep up).\n          however, it does come with a performance cost.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onRenderedRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(renderInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the rendered row has changed\n          (when any row is recycled). Usefull for loading data. It will receive\n          a object parameter that contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last rendered row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRenderedDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last rendered data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{onRenderedRowChangeCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onVisibleRowChange:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(visibilityInfo) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever any visible row is changed.\n          Usefull for loading data. It will receive a object parameter that\n          contains the following information:\n        </Typography>\n      </Box>\n      <Box p={0} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the first visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>firstVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the first visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last visible row.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastVisibleDataIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The data index of the last visible data item.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>lastRowIndex:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The row index of the last row.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          onUnmount:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'(scrollTop: number) => void'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Callback function that is called whenever the list component is\n          unmounted. Usefull for scroll restoration in combination with\n          initialScrollTop.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          initialScrollTop:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 0\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The initial scroll position of the list when first rendered. If\n          initialScrollTop = -1, then the list will scroll to the bottom. Note\n          the initialScrollTop here is relative to the top of the list, meaning\n          that initialScrollTop = 0 will scroll to the first row in the list. It\n          will not scroll to the top of the window.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          useScrollingIndicator:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            boolean, default = false\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          Wheather of not to use scroll indicator. If set to yes, then your row\n          component will receive a prop called isScrolling which indicate if the\n          current row is being scrolled.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number, default = 250\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the user stops scrolling, before\n          setting isScrolling to false.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listTagName:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string, default = \"div\"\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The tag name assigned to the full height list\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          listProps:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            object, default = {'{}'}\n          </span>\n        </Typography>\n      </Box>\n      <Box pl={5} pr={5}>\n        <Typography variant='body1'>\n          The props assigned to the full list element. Usefull for assigning\n          className or accessibility properties. Note that you cannot assign\n          style to it.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{listPropsCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          width:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            string | number, default = {`\"100%\"`}\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={3} pl={5} pr={5}>\n        <Typography variant='body1'>\n          the width assigned to the list window.\n        </Typography>\n      </Box>\n    </div>\n  );\n}\nconst code1 = `import { FullWindowVariableList } from \"react-recycled-list;`;\n\nconst dataCode = `const data = [{firstName: \"a\", lastName: \"b\"}, {firstName: \"c\", lastName: \"d\"}, {firstName: \"e\", lastName: \"f\"}];\nfunction MyList() {\n    //...\n    return <FullWindowVariableList data={data} .../>\n}`;\n\nconst rowCode = `const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: \"25%\", textAlign: \"center\" };\n    return (\n        <div style={{top, height}} className=\"react-recycled-row\">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});`;\n\nconst rowColumnsCode = `function MyList() {\n    //...\n    const data = [\"item 1\", \"item 2\", \"item 3\", \"item 4\", \"item 5\", \"item 6\",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <FullWindowVariableList data={data} rowColumns={rowColumns} .../>\n}`;\n\nconst onRenderedRowChangeCode = `function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <FullWindowVariableList onRenderedRowChange={onRenderedRowChange} .../>\n}`;\n\nconst listPropsCode = `function MyList() {\n    //...\n    return <FullWindowVariableList listProps={{className: \"myList\"}} .../>\n}`;\n\nconst methodsCode = `function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FullWindowVariableList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}`;\n\nconst rowHeightsCode = `function MyList() {\n    //...\n    const data = [\"A short item\", \"A longgggggg item\", \"A longggg item\"];\n    // Total of 3 rows. First row has height 50px, second row has height 150px, and third row has height 100px\n    const rowHeights = [50,150,100];\n    return <FullWindowVariableList rowHeights={rowHeights} .../>\n}`;\n","import { AppBar, Box, Divider, Tab, Tabs, Typography } from '@material-ui/core';\nimport { TabPanel } from './Performance';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nimport listPropsImg from './listProps.png';\nimport { Link } from 'react-router-dom';\n\nexport default function ResponsiveWindowContainerDoc() {\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          render:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'({height: number, width: number}): any'}\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          A function that renders the list based on the given height and width.\n          If a custom window is used, then the height and width passed into this\n          function will be the height and width of the element that the\n          scrollRef points to. Otherwise, it would be the height and width of\n          the global window object. See{' '}\n          <Link to='./custom-window'>default window example</Link> or{' '}\n          <Link to='./custom-window'>custom window example</Link> for more\n          detail.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{dataCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          scrollRef:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            React ref object\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The element that you use to attach the scroll listener. This is\n          usefull when you want to use a custom window list/grid. See{' '}\n          <Link to='./responsive-custom-window'>this example</Link> for more\n          detail.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          debounceResize:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            boolean, default = false\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          If set true the list will adjust its height and width only when the\n          user stops resizing.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          debounceInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the the user stops resizing to\n          triger the resizing (re-computation) of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          debounceInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the the user stops resizing to\n          triger the resizing (re-computation) of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          serverSideHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The initial rendered height of the list. This will determine how many\n          rows are rendered on the server side. Once the page loads the height\n          will be adjusted to the height of its the global window object or the\n          element that scrollRef points to (if set).\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n    </div>\n  );\n}\n\nconst code1 = `import { ResponsiveWindowContainer } from \"react-recycled-list;`;\n\nconst dataCode = `const renderList = (sizeInfo) => {\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FullWindowFixedList\n                      windowHeight={height}\n                      rowComponent={Row}\n                      data={data}\n                      rowHeight={100}\n                      column={column}\n              />\n    );\n};`;\n","import React from 'react';\nimport GeneralPage from './GeneralPage';\nimport {\n  FullWindowFixedList,\n  ResponsiveWindowContainer,\n  RowProps\n} from 'react-recycled-list';\n\nexport default function ResponsiveCustomWindow() {\n  return <GeneralPage code={code} Demo={ResponsiveCustomWindowDemo} />;\n}\n\nfunction ResponsiveCustomWindowDemo() {\n  const scrollRef = React.useRef();\n  const listRef = React.useRef<any>();\n  React.useLayoutEffect(() => {\n    listRef.current.setCustomScrollRef();\n  }, []);\n\n  const data = Array(1000)\n    .fill(null)\n    .map((_, index) => `item ${index}`);\n\n  const containerStyle = {\n    height: 500,\n    width: '100%',\n    overflowY: 'scroll' as any\n  };\n\n  const fillerStyle = {\n    textAlign: 'center' as any,\n    padding: 20\n  };\n  const renderList = (sizeInfo: { width: number; height: number }) => {\n    return (\n      <FullWindowFixedList\n        windowHeight={sizeInfo.height}\n        rowComponent={Row}\n        data={data}\n        rowHeight={100}\n        scrollRef={scrollRef}\n        ref={listRef as any}\n        column={sizeInfo.width > 1200 ? 2 : 1}\n      />\n    );\n  };\n\n  return (\n    <div ref={scrollRef as any} style={containerStyle}>\n      <div style={fillerStyle}>some random ui</div>\n      <div style={fillerStyle}>some random ui</div>\n      <ResponsiveWindowContainer render={renderList} scrollRef={scrollRef} />\n      <div style={fillerStyle}>some random ui</div>\n      <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, top, height, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: column === 1 ? '100%' : '50%',\n    textAlign: 'center' as any\n  };\n  return (\n    <div style={{ top, height }} className='react-recycled-row'>\n      {rowData.map((item) => (\n        <div style={columnStyle}>{item}</div>\n      ))}\n    </div>\n  );\n});\n\nconst code = `import { FullWindowFixedList, FullWindowVariableList } from \"react-recycled-list\";\n\nfunction ResponsiveCustomWindowDemo() {\n  const data = Array(1000).fill(null).map((_, index) => \\`item \\${index}\\`);\n  const scrollRef = React.useRef();\n  const listRef = React.useRef();\n\n  // Important! ref.current is initially undefined. When ref.current is set you must notify FullWindowFixedList or FullWindowVariableList \n  // You can notify it by rerendering or by calling setCustomScrollRef on the list class\n\n  React.useLayoutEffect(() => {\n    listRef.current.setCustomScrollRef();\n  }, []);\n\n  const containerStyle = {\n    height: 500,\n    width: \"100%\",\n    overflowY: \"scroll\",\n  };\n\n  const fillerStyle = {\n    textAlign: \"center\",\n    padding: 20,\n  };\n\n  const renderList = (sizeInfo) => {\n    return (\n      <FullWindowFixedList\n                    windowHeight={sizeInfo.height}\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    scrollRef={scrollRef}\n                    ref={listRef}\n                    column={sizeInfo.width > 1200 ? 2 : 1}\n          />\n    );\n  };\n\n  return (\n    <div ref={ref} style={containerStyle}>\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n              <ResponsiveWindowContainer\n                    render={renderList}\n                    scrollRef={scrollRef}\n              />\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, top, height, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: column === 1? \"100%\": \"50%\",\n    textAlign: \"center\" as any,\n  };\n  return (\n    <div style={{ top, height }} className=\"react-recycled-row\">\n                  {rowData.map((item) => (\n                        <div style={columnStyle}>{item}</div>\n                  ))}\n        </div>\n  );\n});;`;\n","import { AppBar, Box, Divider, Tab, Tabs, Typography } from '@material-ui/core';\nimport { TabPanel } from './Performance';\nimport React from 'react';\nimport Highlight from 'react-highlight.js';\nimport listPropsImg from './listProps.png';\nimport { Link } from 'react-router-dom';\n\nexport default function ResponsiveContainerDoc() {\n  return (\n    <div className='why-page'>\n      <Box p={1} pl={5} pr={5}>\n        <Highlight language='js'>{code1}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          render:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            {'({height: number, width: number}): any'}\n          </span>\n          , <span className='required'>required*</span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          A function that renders the list based on the given height and width.\n          The given height and width is the height and width of the parent\n          element of ResponsiveContainer.\n        </Typography>\n      </Box>\n      <Box pb={3} pt={0} pl={5} pr={5}>\n        <Highlight language='js'>{dataCode}</Highlight>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          debounceResize:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            boolean, default = false\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          If set true the list will adjust its height and width only when the\n          user stops resizing.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          debounceInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the the user stops resizing to\n          triger the resizing (re-computation) of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          debounceInterval:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          How many milisecond to wait after the the user stops resizing to\n          triger the resizing (re-computation) of the list.\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n      <Box pl={5} pr={5}>\n        <Typography variant='h6' style={{ fontWeight: 500 }}>\n          serverSideHeight:{' '}\n          <span style={{ fontStyle: 'italic', fontWeight: 'normal' }}>\n            number\n          </span>\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The initial rendered height of the list. This will determine how many\n          rows are rendered on the server side. Once the page loads the height\n          will be adjusted to the height of its the global window object or the\n          element that scrollRef points to (if set).\n        </Typography>\n      </Box>\n      <Divider className='divider' />\n    </div>\n  );\n}\n\nconst code1 = `import { ResponsiveContainer } from \"react-recycled-list;`;\n\nconst dataCode = `const renderList = (sizeInfo) => {\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FullWindowFixedList\n                      windowHeight={height}\n                      rowComponent={Row}\n                      data={data}\n                      rowHeight={100}\n                      column={column}\n              />\n    );\n};`;\n","import React from \"react\";\nimport {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Switch,\n  Typography,\n} from \"@material-ui/core\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport SimpleList from \"./pages/SimpleList\";\nimport SimpleGrid from \"./pages/SimpleGrid\";\nimport VariableRowHeight from \"./pages/VariableRowHeight\";\nimport VariableColumn from \"./pages/VariableColumn\";\nimport FullWindow from \"./pages/FullWindow\";\nimport VariableRowHeightColumn from \"./pages/VariableRowHeightColumn\";\nimport CustomWindow from \"./pages/CustomWindow\";\nimport ResponsiveContainerPage from \"./pages/ResponsiveContainerDemo\";\nimport ResponsiveWindowContainerDemoPage from \"./pages/ResponsiveWindowContainerDemo\";\nimport LazyLoadingAdvanced from \"./pages/LazyLoadingAdvanced\";\nimport LazyLoadingSimple from \"./pages/LazyLoadingSimple\";\nimport DynamicLoading from \"./pages/DynamicLoading\";\nimport ScrollIndicator from \"./pages/ScrollIndicator\";\nimport ScrollTo from \"./pages/ScrollTo\";\nimport Performance from \"./pages/Performance\";\nimport Stats from \"stats.js\";\nimport ScrollRestoration from \"./pages/ScrollRestoration\";\nimport SSR from \"./pages/SSR\";\nimport WhyPage from \"./pages/WhyPage\";\nimport BeforeYouBegin from \"./pages/BeforeYouBegin\";\nimport FixedListDoc from \"./pages/FixedListDoc\";\nimport VariableListDoc from \"./pages/VariableListDoc\";\nimport FullWindowFixedListDoc from './pages/FullWindowFixedListDoc'\nimport FullWindowVariableListDoc from \"./pages/FullWindowVariableList\";\nimport ResponsiveWindowContainerDoc from \"./pages/ResponsiveWindowContainerDoc\";\nimport ResponsiveCustomWindow from \"./pages/ResponsiveCustomWindow\";\nimport ResponsiveContainerDoc from \"./pages/ResponsiveContainerDoc\";\nvar stats = new Stats();\nstats.dom.style.left = \"300px\";\nstats.dom.style.position = \"\";\nstats.showPanel(0);\n// document.body.appendChild(stats.dom);\n\nfunction animate() {\n  stats.begin();\n\n  // monitored code goes here\n\n  stats.end();\n\n  requestAnimationFrame(animate);\n}\nrequestAnimationFrame(animate);\n\nexport default function SideNav() {\n  const { pathname } = useLocation();\n  React.useEffect(() => {\n    document.getElementById(\"statsjs\")?.appendChild(stats.dom)\n  }, [])\n  return (\n    <div>\n      <Drawer variant=\"permanent\" anchor=\"left\">\n        <Typography variant=\"h6\" className=\"site-title\">\n          React recycled list\n        </Typography>\n        <Divider />\n        <ListItem id=\"statsjs\">\n          <ListItemText primary=\"Stats.js:\" className=\"first-level\" />\n        </ListItem>\n        <List>\n          <Divider />\n          <ListItem>\n            <ListItemText primary=\"Introduction\" className=\"first-level\" />\n          </ListItem>\n          {introductions.map(({ label, route }) => (\n            <ListItem\n              button\n              key={label}\n              className=\"second-level\"\n              component={Link}\n              to={route}\n              selected={pathname === route}\n            >\n              <ListItemText primary={label} />\n            </ListItem>\n          ))}\n          <ListItem>\n            <ListItemText primary=\"Examples\" className=\"first-level\" />\n          </ListItem>\n          {examples.map(({ label, route }) => (\n            <ListItem\n              button\n              key={label}\n              className=\"second-level\"\n              component={Link}\n              to={route}\n              selected={pathname === route}\n            >\n              <ListItemText primary={label} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          <ListItem>\n            <ListItemText primary=\"Components\" className=\"first-level\" />\n          </ListItem>\n          {components.map(({ label, route }) => (\n            <ListItem\n              button\n              key={label}\n              className=\"second-level\"\n              component={Link}\n              to={route}\n              selected={pathname === route}\n            >\n              <ListItemText primary={label} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n    </div>\n  );\n}\n\nexport const introductions = [\n  {\n    label: \"Why use react recycled list\",\n    route: \"/\",\n    component: WhyPage\n  },\n  { label: \"Performance demo\", route: \"/performance\", component: Performance },\n  { label: \"Before you begin\", route: \"/QA\", component: BeforeYouBegin },\n];\n\nexport const examples = [\n  { label: \"Simple List\", route: \"/simple-list\", component: SimpleList },\n  //   { label: \"VS React window\", route: \"/react-window\", component: ReactWindowComparison },\n  { label: \"Simple Grid\", route: \"/simple-grid\", component: SimpleGrid },\n  {\n    label: \"Variable row height\",\n    route: \"/variable-row-height\",\n    component: VariableRowHeight,\n  },\n  {\n    label: \"Variable column\",\n    route: \"/variable-column\",\n    component: VariableColumn,\n  },\n  {\n    label: \"Variable row height + column \",\n    route: \"/variable-height-column\",\n    component: VariableRowHeightColumn,\n  },\n  { label: \"Full window list/grid\", route: \"/full-window\", component: FullWindow },\n  { label: \"Custom window list/grid\", route: \"/custom-window\", component: CustomWindow },\n  {\n    label: \"Responsive list/grid\",\n    route: \"/responsive-list/grid\",\n    component: ResponsiveContainerPage,\n  },\n  {\n    label: \"Responsive window list/grid\",\n    route: \"/responsive-window\",\n    component: ResponsiveWindowContainerDemoPage,\n  },\n  {\n    label: \"Responsive custom window\",\n    route: \"/responsive-custom-window\",\n    component: ResponsiveCustomWindow,\n  },\n  {\n    label: \"Simple Infinite loading\",\n    route: \"/lazy-loading-simple\",\n    component: LazyLoadingSimple,\n  },\n  {\n    label: \"Advanced Infinite loading\",\n    route: \"/lazy-loading-advance\",\n    component: LazyLoadingAdvanced,\n  },\n  {\n    label: \"Dynamic loading\",\n    route: \"/dynamic-loading\",\n    component: DynamicLoading,\n  },\n  {\n    label: \"Scroll indicator\",\n    route: \"/scroll-indicator\",\n    component: ScrollIndicator,\n  },\n  { label: \"Scroll to\", route: \"/scroll-to\", component: ScrollTo },\n  { label: \"Scroll restoration\", route: \"/scroll-restoration\", component: ScrollRestoration },\n//   { label: \"Usage with React table\", route: \"/react-table\" },\n  { label: \"Server side rendering\", route: \"/ssr\", component: SSR },\n];\n\nexport const components = [\n  { label: \"FixedSizeList\", route: \"/fixedsizelist\", component: FixedListDoc },\n  { label: \"VariableSizeList\", route: \"/variablesizelist\", component: VariableListDoc },\n  { label: \"FullWindowFixedList\", route: \"/fullWindowFixedList\", component: FullWindowFixedListDoc },\n  { label: \"FullWindowVariableList \", route: \"/variablesizewindowList\", component: FullWindowVariableListDoc },\n  { label: \"ResponsiveContainer\", route: \"/rResponsivecontainer\", component: ResponsiveContainerDoc },\n  { label: \"ResponsiveWindowContainer\", route: \"/responsiveWindowcontainer\", component: ResponsiveWindowContainerDoc },\n];\n","import { Box, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function WhyPage() {\n  return (\n    <div className='why-page'>\n      <Box p={3} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          What is react-recycled-list?\n        </Typography>\n      </Box>\n      <Box pb={2} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          react-recycled-list is a library for rendering large list with\n          expensive components. Like{' '}\n          <a href='https://github.com/bvaughn/react-window' target='blank'>\n            react-window\n          </a>{' '}\n          and{' '}\n          <a href='https://github.com/bvaughn/react-virtualized' target='blank'>\n            react-virtualized\n          </a>\n          , react-recycled-list only renders the rows that are visible to the\n          user to improve performance. However, react-recycled-list has a\n          different approach compared to traditional windowing library. The main\n          difference is that react-recycled-list keeps the integrity of the DOM\n          tree, meaning it does not add or remove any DOM node. Instead,\n          whenever a row goes off screen, its DOM will be “recycled” to the\n          appropriate position by an update to its absolute position. This\n          allows react-recycled-list to truly keep a constant amount of DOM and\n          prevent unmounting which in some cases can be noticeably more\n          performant than traditional windowing library.\n        </Typography>\n      </Box>\n      <Box p={2} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          Why use react-recycled-list?\n        </Typography>\n      </Box>\n      <Box p={3} pt={2} pb={1} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The main reason you may want to use react-recycled-list is the extreme\n          scrolling performance it provides. However, there are also other\n          perks:\n        </Typography>\n      </Box>\n      <Box p={2} pt={0} pl={5} pr={5}>\n        <ul>\n          <li>\n            <Typography variant='body1'>\n              <span style={{ fontWeight: 500 }}>Performance:</span>\n            </Typography>\n          </li>\n          <Box p={1} pl={3}>\n            <Typography variant='body1'>\n              react-recycled-list prevents unmounting and remounting of row\n              component when scrolling, and it utilizes an extremely effient\n              data structure to track/compute position of rows in the list.\n            </Typography>\n          </Box>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              In the worst case scenario (when your row component is extremely\n              simple), react-recycled-list will on average be at least 30% more\n              performant than traditional windowing library.\n            </Typography>\n          </Box>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              The performance advantave of react-recycled-list increases as the\n              complexity of the row component increases. If your row component\n              is expensive to render, then it is very common for\n              react-recycled-list to have more than 100%, 200% or even 300%+ the\n              performance (in terms of scripting time and rendering time) of\n              traditional windowing library. It also produces noticeably less\n              flickering in fast scrolling.\n            </Typography>\n          </Box>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              Note: If you row component is not expensive enough for\n              react-recycled-list to make a difference, you can turn on CPU\n              throttle in google developer tool to simulate scrolling on devices\n              with low-end hardware.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              {' '}\n              <span style={{ fontWeight: 500 }}>Feature:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              react-recycled-list is feature rich and includes almost everything\n              you need. It provides fixed row height list/grid, variable row\n              height list/grid, variable column grid, full window list/grid,\n              custom window list/grid, responsive list/grid, infinite loading,\n              dynamic loading, scroll restoration, server side rendering and so\n              on, all in one place.\n            </Typography>\n          </Box>\n          <li>\n            <Typography variant='body1'>\n              {' '}\n              <span style={{ fontWeight: 500 }}>Size:</span>\n            </Typography>\n          </li>\n          <Box p={0.5} pl={3}>\n            <Typography variant='body1'>\n              Despite having a complete set of features, react-recycled-list is\n              extremely small in size. At a mere 7kb g-ziped size.\n            </Typography>\n          </Box>\n        </ul>\n      </Box>\n      <Box pt={1} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          How does it work?\n        </Typography>\n      </Box>\n      <Box p={3} pt={2} pb={1} pl={5} pr={5}>\n        <Typography variant='body1'>\n          This library is inspired by this acticle{' '}\n          <a\n            href='https://engineering.monday.com/building-our-recycle-list-solution-in-react/'\n            target='_blank'\n          >\n            here\n          </a>\n          . Check it out to find out how react-recycled-list works.\n        </Typography>\n      </Box>\n      <Box pt={3} pb={0} pl={5} pr={5}>\n        <Typography variant='h5' style={{ fontWeight: 500 }}>\n          Caveat of react-recycled-list?\n        </Typography>\n      </Box>\n      <Box p={0} pt={2} pl={5} pr={5}>\n        <Typography variant='body1'>\n          The main caveat of react-recycled-list is that you must know the\n          height of each row in advance. Mechanism for determining the height of\n          each row automatically is planned.\n        </Typography>\n      </Box>\n      <Box p={3} pt={2} pb={3} pl={5} pr={5}>\n        <Typography variant='body1'>\n          Another caveat of react-recycled-list it that it only supports\n          vertical list/scrolling. If you are looking for horizontal scrolling,\n          then{' '}\n          <a href='https://github.com/bvaughn/react-window' target='blank'>\n            react-window\n          </a>{' '}\n          and{' '}\n          <a href='https://github.com/bvaughn/react-virtualized' target='blank'>\n            react-virtualized\n          </a>{' '}\n          are your best choices.\n        </Typography>\n      </Box>\n    </div>\n  );\n}\n","import { Switch, Route } from 'react-router-dom'\nimport React from 'react'\nimport './root.css'\nimport SideNav, { components, examples, introductions } from './SideNav'\n\nimport 'react-recycled-list/dist/index.css'\n\nconst App = () => {\n  return (\n    <div className='root-content'>\n      <SideNav />\n      <main>\n        <Switch>\n          {examples.map(({ route, component }) => {\n            const Page = component as any\n            return (\n              <Route path={route} exact>\n                <Page />\n              </Route>\n            )\n          })}\n          {introductions.map(({ route, component }) => {\n            const Page = component as any\n            return (\n              <Route path={route} exact>\n                <Page />\n              </Route>\n            )\n          })}\n          {components.map(({ route, component }) => {\n            const Page = component as any\n            return (\n              <Route path={route} exact>\n                <Page />\n              </Route>\n            )\n          })}\n        </Switch>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/listProps.6e1f7ffb.png\";"],"sourceRoot":""}