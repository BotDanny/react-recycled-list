(this["webpackJsonpreact-recycled-list-example"]=this["webpackJsonpreact-recycled-list-example"]||[]).push([[0],{279:function(e,t,a){},280:function(e,t,a){"use strict";a.r(t);a(79);var n=a(0),r=a.n(n),l=a(9),o=a.n(l),i=a(12),s=(a(84),a(312)),c=a(53),d=a(307),m=a(317),p=a(308),h=a(309),u=a(16),f=a(56);function w(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,g(e,t)}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function E(e){for(var t=0,a=[],n=e.length,r=0;r<n;r++)a[r]=0===r?0:t,t+=e[r];return a}function y(e,t){for(var a=e.length,n=0,r={},l=0;l<a;l++){var o=Math.min(n+e[l],t);r[l]=[n,o],n=o}return r}function v(e){if(-1===e||void 0===e)throw Error("Invalid input to ScrollTo, make sure your input data index or row is correct")}function b(e,t){for(var a=0,n=e.length-1;a<=n;){var r=Math.floor((a+n)/2);e[r]<=t?a=r+1:n=r-1}return a}function x(e,t){for(var a=0,n=e.length-1;a<=n;){var r=Math.floor((a+n)/2);e[r]<t?a=r+1:n=r-1}return a}var R={firstRenderedRowIndex:-1,firstRenderedDataIndex:-1,lastRenderedRowIndex:-1,lastRenderedDataIndex:-1,lastRowIndex:-1},I={firstVisibleRowIndex:-1,firstVisibleDataIndex:-1,lastVisibleRowIndex:-1,lastVisibleDataIndex:-1,lastRowIndex:-1},S=function(e){function t(t){var a;return(a=e.call(this,t)||this).onListWillRecycle=function(e,t,n){var r=a.props,l=r.useScrollIndicator,o=r.onRenderedRowChange;if(l&&(a.setState({scrollState:t}),a._debounceScrollState()),o){if(0===a.totalNumOfRenderedRows)return void o(R);var i=e[a.mod(n-1)];if(i===a.prevLastRenderedRow)return;var s=e[n];o({firstRenderedRowIndex:s,firstRenderedDataIndex:a.rowToDataIndexMap[s][0],lastRenderedRowIndex:i,lastRenderedDataIndex:a.rowToDataIndexMap[i][1]-1,lastRowIndex:a.totalRows-1}),a.prevLastRenderedRow=i}},a.onScrollChange=function(e){var t=a.props.onVisibleRowChange;if(t){if(0===a.totalNumOfRenderedRows)return t(I),void(a.prevLastVisibleRow=-1);var n=a.getBottomViewportRowIndex(e+a.windowHeight);if(a.fullHeight<a.windowHeight&&(n=a.getBottomViewportRowIndex(e+a.fullHeight)),n!==a.prevLastVisibleRow){var r=a.getTopViewportRowIndex(e);t({firstVisibleRowIndex:r,firstVisibleDataIndex:a.rowToDataIndexMap[r][0],lastVisibleRowIndex:n,lastVisibleDataIndex:a.rowToDataIndexMap[n][1]-1,lastRowIndex:a.totalRows-1}),a.prevLastVisibleRow=n}}},a.recycle=function(e){var t=a.state,n=t.renderedRowIndex,r=t.topRenderedRowRelativeIndex,l=t.scrollState,o=!(e-a.prevScroll>0);a.prevScroll=e,a.onScrollChange(e);var i=0;if(o){i=n[r]-Math.max(a.getTopViewportRowIndex(e)-a.numOfInvisibleRowOnEachDirection,0)}else{var s=n[a.mod(r-1)],c=e+a.windowHeight;i=Math.min(a.getBottomViewportRowIndex(c)+a.numOfInvisibleRowOnEachDirection,a.totalRows-1)-s}if(i>0){for(var d=[].concat(n),m=[].concat(l),p=0;p<i;){var h=a.mod(r+(o?-p-1:p));d[h]+=o?-a.totalNumOfRenderedRows:a.totalNumOfRenderedRows,m[h]=!0,p++}var u=a.mod(r+(o?-i:i));a.onListWillRecycle(d,m,u),a.setState({renderedRowIndex:d,topRenderedRowRelativeIndex:u})}},a.resetList=function(){var e=a.totalNumOfRenderedRows-1,t=a.getResetViewportBottom(),n=Math.min(a.getBottomViewportRowIndex(t)+a.numOfInvisibleRowOnEachDirection,a.totalRows-1)-e,r=a.initialArrayTemplate.map((function(e,t){return t})),l=a.initialArrayTemplate.map((function(){return!1})),o=0;if(n>0){for(var i=0;i<n;){var s=a.mod(i);r[s]+=a.totalNumOfRenderedRows,l[s]=!0,i++}o=a.mod(n)}a.onListWillRecycle(r,l,o),a.onScrollChange(a.prevScroll),a.setState({renderedRowIndex:r,topRenderedRowRelativeIndex:o})},a.onScroll=function(e){a.recycle(e.currentTarget.scrollTop)},a.scrollToDataIndex=function(e){if(-1!==e){var t=Object.values(a.rowToDataIndexMap).findIndex((function(t){return e>=t[0]&&e<t[1]}));v(t);var n=a.rowPositions[t];a.manualScroll(n)}else a.manualScroll(e)},a.scrollToRow=function(e){if(-1!==e){var t=a.rowPositions[e];v(t),a.manualScroll(t)}else a.manualScroll(e)},a.scrollTo=function(e){a.manualScroll(e)},a.manualScroll=function(e){a.listWindowRef.current&&(a.listWindowRef.current.scrollTop=-1===e?a.fullHeight:e)},a.mod=function(e,t){return void 0===t&&(t=a.totalNumOfRenderedRows),(e%t+t)%t},a.getResetViewportBottom=function(){return a.prevScroll+a.windowHeight},a._debounceScrollState=function(){clearTimeout(a.timeOut),a.timeOut=setTimeout((function(){a.setState({scrollState:a.initialArrayTemplate.map((function(){return!1}))})}),a.props.scrollInterval||250)},a.prevScroll=0,a.prevLastVisibleRow=-1,a.prevLastRenderedRow=-1,a}w(t,e);var a=t.prototype;return a.componentDidMount=function(){var e=this.props.initialScrollTop;e&&this.manualScroll(e)},a.componentWillUnmount=function(){var e=this.props.onUnmount;e&&e(this.prevScroll)},a.componentDidUpdate=function(e){if(this.shouldResetList(e)){var t=this.initializeProperties(),a=t.rowToDataIndexMap,n=t.rowPositions,r=t.totalRows,l=t.initialArrayTemplate,o=t.fullHeight,i=t.totalNumOfRenderedRows,s=t.numOfInvisibleRowOnEachDirection,c=t.windowHeight,d=t.rowHeights;this.rowToDataIndexMap=a,this.rowPositions=n,this.totalRows=r,this.initialArrayTemplate=l,this.fullHeight=o,this.totalNumOfRenderedRows=i,this.numOfInvisibleRowOnEachDirection=s,this.rowHeights=d,this.windowHeight=c,this.resetList()}},a.render=function(){var e=this,t=this.props,a=t.listTagName,n=t.listProps,l=void 0===n?{}:n,o=t.listWindowProps,i=void 0===o?{}:o,s=t.listWindowTagName,c=t.data,d=t.width,m=t.rowComponent,p=this.state,h=p.renderedRowIndex,u=p.scrollState,f=a||"div",w=s||"div",g=m;return r.a.createElement(w,Object.assign({},i,{style:{height:this.windowHeight,overflowY:"auto",width:d||"100%"},onScroll:this.onScroll,ref:this.listWindowRef}),r.a.createElement(f,Object.assign({},l,{style:{height:this.fullHeight,position:"relative"}}),h.map((function(t,a){var n=e.rowToDataIndexMap[t],l=n[0],o=n[1];return r.a.createElement(g,{key:a,data:c,dataIndex:l,dataEndIndex:o,row:t,column:o-l,isScrolling:u[a],top:e.rowPositions[t],height:e.rowHeights[t]})}))))},t}(r.a.PureComponent),W=function(e){function t(t){var a;(a=e.call(this,t)||this).initializeProperties=function(){var e=a.props,t=e.rowHeight,n=e.column,r=e.rowColumns,l=e.data,o=e.height,i=e.offScreenRow;if(r&&r.reduce((function(e,t){return e+t}),0)!==l.length)throw Error("The total number of data item calculated from rowColumns does not match the length of your input data");var s=r||(n?Array(Math.ceil(l.length/n)).fill(n):Array(l.length).fill(1)),c=s.map((function(){return t})),d=y(s,l.length),m=E(c),p=c.length,h=i||1,u=Math.ceil(o/t)+2*h;return u>p&&(u=p),{rowToDataIndexMap:d,rowPositions:m,totalRows:p,initialArrayTemplate:Array(u).fill(null),fullHeight:c.reduce((function(e,t){return e+t}),0),totalNumOfRenderedRows:u,numOfInvisibleRowOnEachDirection:h,rowHeights:c,windowHeight:o}},a.shouldResetList=function(e){var t=a.props;if(e===t)return!1;var n=t.rowHeight,r=t.column,l=t.rowColumns,o=t.height,i=t.data,s=t.offScreenRow;return e.rowHeight!==n||e.column!==r||e.rowColumns!==l||e.height!==o||e.data!==i||e.offScreenRow!==s},a.getTopViewportRowIndex=function(e){return Math.floor(e/a.props.rowHeight)},a.getBottomViewportRowIndex=function(e){var t=e/a.props.rowHeight;return Number.isInteger(t)?t-=1:t=Math.floor(t),t};var n=a.initializeProperties(),l=n.rowToDataIndexMap,o=n.rowPositions,i=n.totalRows,s=n.initialArrayTemplate,c=n.fullHeight,d=n.totalNumOfRenderedRows,m=n.numOfInvisibleRowOnEachDirection,p=n.rowHeights,h=n.windowHeight;a.rowToDataIndexMap=l,a.rowPositions=o,a.totalRows=i,a.initialArrayTemplate=s,a.fullHeight=c,a.totalNumOfRenderedRows=d,a.numOfInvisibleRowOnEachDirection=m,a.rowHeights=p,a.windowHeight=h,a.listWindowRef=r.a.createRef();var u=a.initialArrayTemplate.map((function(e,t){return t})),f=a.initialArrayTemplate.map((function(){return!1}));return t.initialScrollTop||(a.onListWillRecycle(u,f,0),a.onScrollChange(0)),a.state={renderedRowIndex:u,scrollState:f,topRenderedRowRelativeIndex:0},a}return w(t,e),t}(S),T=function(e){function t(t){var a;(a=e.call(this,t)||this).initializeProperties=function(){var e=a.props,t=e.rowHeight,n=e.rowHeights,r=e.column,l=e.rowColumns,o=e.data,i=e.height,s=e.offScreenRow;if(l){if(l.reduce((function(e,t){return e+t}),0)!==o.length)throw Error("The total number of data item calculated from rowColumns does not match the length of your input data");if(l.length!==n.length)throw Error("The number of rows provided from rowHeights does not match the number of rows provided from rowColumns")}else if(r){if(Math.ceil(o.length/r)!==n.length)throw Error("The number of rows provided from rowHeights does not match the number of rows calculated from column")}else if(n.length!==o.length)throw Error("The number of rows provided from rowHeights does not match the number of rows calculated from your input data");var c=y(l||(r?Array(n.length).fill(r):Array(n.length).fill(1)),o.length),d=E(n),m=n.length,p=s||1,h=Math.ceil(i/t)+2*p;return h>m&&(h=m),{rowToDataIndexMap:c,rowPositions:d,totalRows:m,initialArrayTemplate:Array(h).fill(null),fullHeight:n.reduce((function(e,t){return e+t}),0),totalNumOfRenderedRows:h,numOfInvisibleRowOnEachDirection:p,rowHeights:n,windowHeight:i}},a.shouldResetList=function(e){var t=a.props;if(e===t)return!1;var n=t.rowHeight,r=t.rowHeights,l=t.column,o=t.rowColumns,i=t.height,s=t.data,c=t.offScreenRow;return e.rowHeight!==n||e.rowHeights!==r||e.column!==l||e.rowColumns!==o||e.height!==i||e.data!==s||e.offScreenRow!==c},a.getTopViewportRowIndex=function(e){return b(a.rowPositions,e)-1},a.getBottomViewportRowIndex=function(e){return x(a.rowPositions,e)-1};var n=a.initializeProperties(),l=n.rowToDataIndexMap,o=n.rowPositions,i=n.totalRows,s=n.initialArrayTemplate,c=n.fullHeight,d=n.totalNumOfRenderedRows,m=n.numOfInvisibleRowOnEachDirection,p=n.rowHeights,h=n.windowHeight;a.rowToDataIndexMap=l,a.rowPositions=o,a.totalRows=i,a.initialArrayTemplate=s,a.fullHeight=c,a.totalNumOfRenderedRows=d,a.numOfInvisibleRowOnEachDirection=m,a.rowHeights=p,a.windowHeight=h,a.listWindowRef=r.a.createRef();var u=a.initialArrayTemplate.map((function(e,t){return t})),f=a.initialArrayTemplate.map((function(){return!1}));return a.onListWillRecycle(u,f,0),a.onScrollChange(0),a.state={renderedRowIndex:u,scrollState:f,topRenderedRowRelativeIndex:0},a}return w(t,e),t}(S),N=function(e){function t(t){var a;(a=e.call(this,t)||this).initializeProperties=function(e){void 0===e&&(e=!1);var t=a.props,n=t.rowHeight,r=t.column,l=t.rowColumns,o=t.data,i=t.offScreenRow,s=t.serverSideHeight,c=t.scrollRef,d=t.rootMarginTop,m=void 0===d?0:d,p=t.rootMarginBottom,h=void 0===p?0:p;if(l&&l.reduce((function(e,t){return e+t}),0)!==o.length)throw Error("The total number of data item calculated from rowColumns does not match the length of your input data");var u,f=0;e&&void 0!==s?f=s:"scrollRef"in a.props?null!==c&&void 0!==c&&c.current?(f=parseInt(window.getComputedStyle(c.current).height),u=c.current):f=0:(f=window.innerHeight,u=window),f=Math.max(0,f-m-h);var w=l||(r?Array(Math.ceil(o.length/r)).fill(r):Array(o.length).fill(1)),g=w.map((function(){return n})),v=y(w,o.length),b=E(g),x=g.length,R=Math.ceil(f/n),I=i||R?1:0,S=R+2*I;return S>x&&(S=x),{rowToDataIndexMap:v,rowPositions:b,totalRows:x,initialArrayTemplate:Array(S).fill(null),fullHeight:g.reduce((function(e,t){return e+t}),0),totalNumOfRenderedRows:S,numOfInvisibleRowOnEachDirection:I,rowHeights:g,windowHeight:f,scrollListener:u}},a.attachScrollListener=function(){a.scrollListener&&(a.scrollListener.removeEventListener("scroll",a.onScroll),a.scrollListener.addEventListener("scroll",a.onScroll))},a.getScrollTop=function(){var e=a.props.rootMarginTop,t=void 0===e?0:e,n=a.fullListRef.current;if(!n)return window.scrollY;var r=a.scrollListener===window?0:a.scrollListener.getBoundingClientRect().top;return-(n.getBoundingClientRect().top-r-t)},a.onScroll=function(){if(a.fullListRef){var e=a.getScrollTop();a.recycle(e)}},a.manualScroll=function(e){var t=e;if(-1===e){var n=a.props,r=n.rootMarginBottom,l=void 0===r?0:r,o=n.rootMarginTop,i=void 0===o?0:o,s=a.windowHeight+i+l;t=a.fullHeight+l+i-s}var c=a.props.rootMarginTop,d=void 0===c?0:c;if(a.scrollListener){var m=a.fullListRef.current;if(a.scrollListener===window){var p=m.getBoundingClientRect().top+window.scrollY;window.scrollTo({top:p+t-d})}else{var h=a.scrollListener,u=m.getBoundingClientRect().top-h.getBoundingClientRect().top;h.scrollTop=u+t-d}}},a.shouldResetList=function(e){var t=a.props,n=t.rowHeight,r=t.column,l=t.rowColumns,o=t.windowHeight,i=t.data,s=t.offScreenRow,c=t.scrollRef,d=t.rootMarginBottom,m=t.rootMarginTop;return e.data!==i||e.windowHeight!==o||c&&c.current!==a.scrollListener||e.rowHeight!==n||e.column!==r||e.rowColumns!==l||e.offScreenRow!==s||e.rootMarginBottom!==d||e.rootMarginTop!==m},a.resetListAndRef=function(){var e=a.initializeProperties(),t=e.rowToDataIndexMap,n=e.rowPositions,r=e.totalRows,l=e.initialArrayTemplate,o=e.fullHeight,i=e.totalNumOfRenderedRows,s=e.numOfInvisibleRowOnEachDirection,c=e.rowHeights,d=e.windowHeight,m=e.scrollListener,p=a.props.scrollRef;a.rowToDataIndexMap=t,a.rowPositions=n,a.totalRows=r,a.initialArrayTemplate=l,a.fullHeight=o,a.totalNumOfRenderedRows=i,a.numOfInvisibleRowOnEachDirection=s,a.rowHeights=c,a.windowHeight=d,p&&p.current!==a.scrollListener&&(a.scrollListener=m,a.attachScrollListener()),a.resetList()},a.setCustomScrollRef=function(){a.resetListAndRef()},a.getTopViewportRowIndex=function(e){return Math.max(Math.floor(e/a.props.rowHeight),0)},a.getBottomViewportRowIndex=function(e){var t=e/a.props.rowHeight;return Number.isInteger(t)?t-=1:t=Math.floor(t),Math.min(t,a.totalRows-1)},a.getResetViewportBottom=function(){var e=a.props,t=e.rootMarginBottom,n=void 0===t?0:t,r=e.rootMarginTop,l=void 0===r?0:r;return a.getScrollTop()+(a.windowHeight+l+n)-n};var n=a.initializeProperties(!0),l=n.rowToDataIndexMap,o=n.rowPositions,i=n.totalRows,s=n.initialArrayTemplate,c=n.fullHeight,d=n.totalNumOfRenderedRows,m=n.numOfInvisibleRowOnEachDirection,p=n.rowHeights,h=n.windowHeight,u=n.scrollListener;a.fullListRef=r.a.createRef(),a.listWindowRef=null,a.rowToDataIndexMap=l,a.rowPositions=o,a.totalRows=i,a.initialArrayTemplate=s,a.fullHeight=c,a.totalNumOfRenderedRows=d,a.numOfInvisibleRowOnEachDirection=m,a.rowHeights=p,a.windowHeight=h,a.scrollListener=u,a.initialScrolling=!1;var f=a.initialArrayTemplate.map((function(e,t){return t})),w=a.initialArrayTemplate.map((function(){return!1}));return!t.initialScrollTop&&a.scrollListener&&(a.onListWillRecycle(f,w,0),a.onScrollChange(0)),a.state={renderedRowIndex:f,scrollState:w,topRenderedRowRelativeIndex:0},a}w(t,e);var a=t.prototype;return a.componentDidMount=function(){this.attachScrollListener();var e=this.props.initialScrollTop;e&&this.manualScroll(e)},a.componentWillUnmount=function(){this.scrollListener&&this.scrollListener.removeEventListener("scroll",this.onScroll);var e=this.props.onUnmount;e&&e(this.prevScroll)},a.componentDidUpdate=function(e){this.shouldResetList(e)&&this.resetListAndRef()},a.render=function(){var e=this,t=this.props,a=t.listTagName,n=t.listProps,l=void 0===n?{}:n,o=t.data,i=t.width,s=t.rowComponent,c=this.state,d=c.renderedRowIndex,m=c.scrollState;console.log("render");var p=a||"div",h=s;return r.a.createElement(p,Object.assign({},l,{style:{height:this.fullHeight,position:"relative",width:i},ref:this.fullListRef}),d.map((function(t,a){var n=e.rowToDataIndexMap[t],l=n[0],i=n[1];return r.a.createElement(h,{key:a,data:o,dataIndex:l,dataEndIndex:i,row:t,column:i-l,isScrolling:m[a],top:e.rowPositions[t],height:e.rowHeights[t]})})))},t}(S);function C(e){var t,a,n=e.render,l=e.className,o=e.debounceResize,i=e.debounceInterval,s=e.serverSideHeight,c=Object(f.a)({refreshMode:o?"debounce":void 0,refreshRate:i||100}),d=c.width,m=c.height,p=c.ref,h=r.a.useState(!1),u=h[0],w=h[1];return r.a.useLayoutEffect((function(){void 0!==s&&w(!0)}),[]),r.a.createElement("div",{className:(t="react-recycled-responsive-container",a=l,a?t+" "+a:t),ref:p,style:{height:"100%",width:"100%"}},n({width:d||0,height:m||!u&&s||0}))}function D(e){var t=e.render,a=e.debounceResize,n=e.debounceInterval,l=e.serverSideHeight,o=e.scrollRef,i=r.a.useRef(),s=Object(f.a)({refreshMode:a?"debounce":void 0,refreshRate:n||100,targetRef:"scrollRef"in e?o:i}),c=s.width,d=s.height,m=r.a.useState(!1),p=m[0],h=m[1],u=r.a.useState(!0),w=u[0],g=u[1];return r.a.useLayoutEffect((function(){void 0!==l&&h(!p)}),[]),r.a.useLayoutEffect((function(){g(!w)}),[null===o||void 0===o?void 0:o.current,o]),r.a.createElement(r.a.Fragment,null,t({width:c||0,height:d||!p&&l||0}),r.a.createElement("div",{ref:i,style:{position:"fixed",height:"100vh",width:"100vw"}}))}var L=a(4),H=a.n(L);function A(e){var t=e.code,a=e.Demo;return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"demo-section half-section"},r.a.createElement(a,null)),r.a.createElement("div",{className:"code-section half-section"},r.a.createElement("div",{className:"code-wrapper"},r.a.createElement(H.a,{language:"js"},t))))}function P(e,t){return Math.floor(Math.random()*(t-e+1))+e}function F(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(W,{height:500,rowComponent:O,data:e,rowHeight:100})}var O=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a];return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row",inlist:!0},o)})),j='import { FixedList } from "react-recycled-list";\n\nfunction SimpleListDemo() {\n\n  const data = Array(1000).fill(null).map((_, index) => `index ${index}`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100}/>\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex, top, height } = props;\n\n  const value = data[dataIndex];\n  // Important!, make sure you inline-style your component with the the provided top, height. Also make sure to set your container element to position absolute\n  return <div style={{top, height}} className="react-recycled-row">{value}</div>;\n})';function k(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(W,{height:300,rowComponent:M,data:e,rowHeight:100,column:4})}var M=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.top,o=e.height,i=t.slice(a,n),s={width:"25%",textAlign:"center"};return r.a.createElement("div",{style:{top:l,height:o},className:"react-recycled-row"},i.map((function(e){return r.a.createElement("div",{style:s},e)})))})),V='import { FixedList } from "react-recycled-list";\n\nfunction SimpleGridDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n    return <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} column={4} />\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height } = props;\n\n    // You are given the start and end index of the data in this row. You style and arrange the columns yourself\n    // Note the data item at dataEndIndex is not included in the row. If dataIndex = 0 and dataEndIndex = 3 then the data in this row is 0, 1 and 2\n\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n        width: "25%",\n        textAlign: "center",\n    };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});';function z(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)})),t=e.map((function(e,t){return P(60,140)}));return r.a.createElement(T,{height:400,rowComponent:U,data:e,rowHeight:80,rowHeights:t})}var U=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a];return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row"},o)})),q='import { VariableList } from "react-recycled-list";\n\nfunction VariableRowHeightDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n\n    // You define the height of each row. In this case, each row has random height between 60 and 140\n    // Note the length of this array must match the total amount of rows in the list/grid\n\n    const rowHeights = data.map((_, index) => randInt(60, 140));\n    \n    // The rowHeight prop here is an estimate(average) of the height of each row\n\n    return <VariableList height={350} rowComponent={Row} data={data} rowHeight={80} rowHeights={rowHeights}/>;\n}\n  \nconst Row = React.memo(function (props) {\n    const { data, dataIndex, top, height } = props;\n    const value = data[dataIndex];\n\n    return <div style={{top, height}} className="react-recycled-row">{value}</div>\n});';function B(){var e=Array(300).fill(null).map((function(){return P(1,4)})),t=e.reduce((function(e,t){return t+e}),0),a=Array(t).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(W,{height:400,rowComponent:_,data:a,rowHeight:100,rowColumns:e})}var _=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.column,o=e.top,i=e.height,s=t.slice(a,n),c={width:{1:"100%",2:"50%",3:"33.33%",4:"25%"}[l],textAlign:"center"};return r.a.createElement("div",{style:{top:o,height:i},className:"react-recycled-row"},s.map((function(e){return r.a.createElement("div",{style:c},e)})))})),Y='import { FixedList } from "react-recycled-list";\n\nfunction VariableColumnDemo() {\n\n    // Define 300 rows of data, each row has a random number of column between 1 and 4\n\n    const columnsInEachRow = Array(300).fill(null).map(() => randInt(1, 4));\n\n    // Calculate the total amount of items/columns in the list\n\n    const totalNumberOfItems = columnsInEachRow.reduce((acc, column) => column + acc, 0);\n\n    // Define the data\n\n    const data = Array(totalNumberOfItems).fill(null).map((_, index) => `item ${index}`);\n\n    // It is up to you to define your data and rowColumns, but the total number of columns from rowColumn must be equal to the length of data\n\n    return <FixedList height={400} rowComponent={Row} data={data} rowHeight={100} rowColumns={columnsInEachRow} />\n}\n\nconst Row = React.memo(function (props) {\n\n    // column is the number of column in current row. It can also be calculated as dataEndIndex - dataIndex\n    \n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const widthMap = {\n        1: "100%",\n        2: "50%",\n        3: "33.33%",\n        4: "25%"\n    }\n\n    const columnStyle = {\n        width: widthMap[column],\n        textAlign: "center",\n    };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});';function $(e){var t=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(N,{rowComponent:G,data:t,rowHeight:100})}var G=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a];return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row"},o)})),J='import { FullWindowFixedList, FullWindowVariableList } from "react-recycled-list";\n\n// Important! FullWindowFixedList and FullWindowVariableList are not responsive by default!\n// You must wrap in it the responsive container to make it responsive\n\nfunction FullWindowDemo() {\n\n    const data = Array(1000).fill(null).map((_, index) => `index ${index}`);\n\n    // FullWindowFixedList is essentially the same as FixedList but without the height prop\n    // FullWindowVariableList is essentially the same as VariableList but without the height prop\n\n    return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100} />\n}\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n    // the data here is the same data that is passed into the FixedList\n    const { data, dataIndex, top, height } = props;\n\n    const value = data[dataIndex];\n    return <div style={{top, height}} className="react-recycled-row">{value}</div>;\n})',Q=a(10);function K(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)})),t=function(e){for(var t=[],a=[],n=0,r=0;n<e;r++){t[r]=P(60,140);var l=P(1,4),o=n+l;a[r]=o>e?e-n:l,n=o}return[t,a]}(e.length),a=Object(Q.a)(t,2),n=a[0],l=a[1];return r.a.createElement(T,{height:400,rowComponent:X,data:e,rowHeight:80,rowColumns:l,rowHeights:n})}var X=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.column,o=e.top,i=e.height,s=t.slice(a,n),c={width:{1:"100%",2:"50%",3:"33.33%",4:"25%"}[l],textAlign:"center"};return r.a.createElement("div",{style:{top:o,height:i},className:"react-recycled-row"},s.map((function(e){return r.a.createElement("div",{style:c},e)})))})),Z='import { VariableList } from "react-recycled-list";\n\n// Function for generating randow row heights and columns\n// Each row will have height between 60 and 140 px and column between 1 and 4\nfunction generateRamdomRowHeightAndColumn(dataLength: number) {\n    const heights: number[] = [];\n    const columns: number[] = [];\n    let nextDataIndex = 0;\n    for (let i = 0; nextDataIndex < dataLength; i++) {\n      heights[i] = randInt(60, 140);\n      const column = randInt(1, 4);\n      const tempNextDataIndex = nextDataIndex + column;\n      columns[i] =\n        tempNextDataIndex > dataLength ? dataLength - nextDataIndex : column;\n      nextDataIndex = tempNextDataIndex;\n    }\n  \n    return [heights, columns];\n}\n  \nfunction VariableRowHeightColumnDemo() {\n    const data = Array(totalNumberOfItems).fill(null).map((_, index) => `item ${index}`);\n    // For demo purposes I used a random generator. You can however define it whatever you want it to be.\n    // The key takeaway is the length of rowHeights must equal to the length of rowColumns\n    // And the total number of column calculated from rowColumns must be equal to the length of data\n    const [rowHeights, rowColumns] = generateRamdomRowHeightAndColumn(data.length)\n  \n    return <VariableList height={400} rowComponent={Row} data={data} rowHeight={100} rowColumns={rowColumns} rowHeights={rowHeights}/>\n}\n  \nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const widthMap = {\n        1: "100%",\n        2: "50%",\n        3: "33.33%",\n        4: "25%"\n    }\n  \n    const columnStyle = {\n        width: widthMap[column],\n        textAlign: "center",\n    };\n\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});';function ee(){var e=r.a.useRef(),t=r.a.useRef(),a=r.a.useState(!1),n=Object(Q.a)(a,2),l=(n[0],n[1]);r.a.useLayoutEffect((function(){l(!0),t.current.setCustomScrollRef()}),[]);var o=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)})),i={textAlign:"center",padding:20};return r.a.createElement("div",{ref:e,style:{height:500,width:"100%",overflowY:"scroll"}},r.a.createElement("div",{style:i},"some random ui"),r.a.createElement("div",{style:i},"some random ui"),r.a.createElement(N,{rowComponent:te,data:o,rowHeight:100,scrollRef:e,ref:t}),r.a.createElement("div",{style:i},"some random ui"),r.a.createElement("div",{style:i},"some random ui"))}var te=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a];return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row"},o)})),ae='import { FullWindowFixedList, FullWindowVariableList } from "react-recycled-list";\n\nfunction CustomWindowDemo() {\n  const scrollRef = React.useRef();\n  const listRef = React.useRef();\n\n  // Important! ref.current is initially undefined. When ref.current is set you must notify FullWindowFixedList or FullWindowVariableList \n  // You can notify it by rerendering or by calling setCustomScrollRef on the list class\n\n  const [_, setComponentHasMounted] = React.useState(false);\n  React.useLayoutEffect(() => {\n    // Once scrollRef.current is set, you must notify the list. You can do it by setState in a useLayoutEffect which cause rerendering\n    setComponentHasMounted(true);\n    // Or you can do it by calling the setCustomScrollRef method on the list\n    listRef.current.setCustomScrollRef();\n    // The reason that useLayoutEffect is used instead of useEffect is because we don\'t want the browser to paint the empty list (before scrollRef is set)\n  }, []);\n\n  const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n\n  const containerStyle = {\n    height: 500,\n    width: "100%",\n    overflowY: "scroll",\n  };\n\n  const fillerStyle = {\n    textAlign: "center",\n    padding: 20,\n  };\n\n  return (\n    <div ref={ref} style={containerStyle}>\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n              <FullWindowFixedList\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    scrollRef={scrollRef}\n                    ref={listRef}\n              />\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  return <div style={{top, height}} className="react-recycled-row">{value}</div>;\n});';function ne(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement("div",{style:{width:"100%",height:"50vh",resize:"both",overflow:"auto"}},r.a.createElement(C,{render:function(t){console.log(t);var a=t.width,n=t.height,l=a>1200?2:1;return r.a.createElement(W,{height:n,rowComponent:re,data:e,rowHeight:100,column:l})}}))}var re=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.column,o=e.top,i=e.height,s=t.slice(a,n),c={width:1===l?"100%":"50%",textAlign:"center"};return r.a.createElement("div",{style:{top:o,height:i},className:"react-recycled-row"},s.map((function(e){return r.a.createElement("div",{style:c},e)})))})),le='import { ResponsiveContainer } from "react-recycled-list";\n\n// Try resizing the list, the column will change on the 1200px break point\n// The height of the list is set to 50% of the height of the view port\n\nfunction ResponsiveContainerDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n  \n    const renderList = (sizeInfo) => {\n      const { width, height } = sizeInfo;\n      const column = width > 1200 ? 2 : 1;\n      return (\n        <FixedList\n                        height={height}\n                        rowComponent={Row}\n                        data={data}\n                        rowHeight={100}\n                        column={column}\n                />\n      );\n    };\n    // Important! If you want to use padding, then make sure to set box-sizing to border box on the parent element of the ResponsiveContainer\n    const resizableContainerStyle = {\n      width: "100%",\n      height: "50vh",\n      resize: "both",\n      overflow: "auto"\n    };\n  \n    return (\n      <div style={resizableContainerStyle}>\n                        <ResponsiveContainer render={renderList} />\n            </div>\n    );\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n      width: column === 1? "100%" : "50%",\n      textAlign: "center",\n    };\n    return (\n      <div style={{top, height}} className="react-recycled-row">\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});';function oe(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(D,{render:function(t){console.log(t);var a=t.width,n=t.height,l=a>1200?2:1;return r.a.createElement(N,{windowHeight:n,rowComponent:ie,data:e,rowHeight:100,column:l})}})}var ie=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.column,o=e.top,i=e.height,s=t.slice(a,n),c={width:1===l?"100%":"50%",textAlign:"center"};return r.a.createElement("div",{style:{top:o,height:i},className:"react-recycled-row"},s.map((function(e){return r.a.createElement("div",{style:c},e)})))})),se='import { ResponsiveWindowContainer, FullWindowFixedList } from "react-recycled-list";\n\n// Try resizing the window, the column will change on the 1200px break point\n\nfunction ResponsiveWindowContainerDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n  \n    const renderList = (sizeInfo) => {\n      const { width, height } = sizeInfo;\n      const column = width > 1200 ? 2 : 1;\n      return (\n        <FullWindowFixedList\n                        windowHeight={height}\n                        rowComponent={Row}\n                        data={data}\n                        rowHeight={100}\n                        column={column}\n                />\n      );\n    };\n  \n    return <ResponsiveWindowContainer render={renderList} />;\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n      width: column === 1? "100%" : "50%",\n      textAlign: "center",\n    };\n    return (\n      <div style={{top, height}} className="react-recycled-row">\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});',ce=a(32),de=a(20);function me(e,t){setTimeout((function(){for(var a=[],n=20*(e-1),r=n;r<n+20;r++)a.push("item ".concat(r+1));t(a,e)}),1500)}var pe={data:{1:Array(20).fill(null).map((function(){}))},nextPage:1,isLoading:!1};function he(){var e=r.a.useState(pe),t=Object(Q.a)(e,2),a=t[0],n=t[1],l=function(e,t){var r=Object(de.a)(Object(de.a)({},a.data),{},Object(ce.a)({},t,e)),l=t+1;l<=5&&(r[l]=[void 0]),n(Object(de.a)(Object(de.a)({},a),{},{data:r,isLoading:!1,nextPage:l}))};r.a.useEffect((function(){me(a.nextPage,l)}),[]);var o=Object.values(a.data).flat();return r.a.createElement(W,{height:500,rowComponent:ue,data:o,rowHeight:100,onRenderedRowChange:function(e){e.firstRenderedRowIndex,e.firstRenderedDataIndex,e.lastRenderedRowIndex;var t=e.lastRowIndex;e.lastRenderedDataIndex===t&&!1===a.isLoading&&a.nextPage<=5&&(n(Object(de.a)(Object(de.a)({},a),{},{isLoading:!0})),me(a.nextPage,l))}})}var ue=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a],i=void 0===o?"loading":o;return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row"},i)})),fe='import { FixedList } from "react-recycled-list";\n\n// This is a rather complicated example\n// The key point is to utilize onRenderedRowChange or onVisibleRowChange to load your data\n\nconst numberOfItemPerPage = 20;\nconst numberOfPages = 5;\n\n// Just a simulation of an API call\nfunction fetchData(page, onSuccess) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    const endDataIndex = startDataIndex + numberOfItemPerPage\n    for (let i = startDataIndex; i < endDataIndex; i++) {\n      data.push(`item ${i + 1}`);\n    }\n    onSuccess(data, page);\n  }, 2000);\n}\n\n// Use a map to store the data (you do not have to do the same, the implementation is up to you)\nconst initialStore = {\n  data: { 1: Array(numberOfItemPerPage).fill(null).map(() => undefined) },\n  nextPage: 0,\n  isLoading: false,\n};\n\nfunction LazyLoadingDemo() {\n  const [store, setStore] = React.useState(initialStore);\n\n  const onFetchDataSuccess = (newData, page) => {\n    const newStoreData = { ...store.data, [page]: newData };\n    // For demo purpose I set the max page to be 5\n    const nextPage = page + 1\n    const hasNextPage = nextPage <= numberOfPages;\n    if (hasNextPage) {\n      // If there is a next page, add a empty data item to the next page. This empty data item will be rendered as "loading..."\n      newStoreData[nextPage] = [undefined];\n    }\n    setStore({ ...store, data: newStoreData, isLoading: false, nextPage: nextPage });\n  };\n\n  React.useEffect(() => {\n    // Initial fetch\n    fetchData(store.nextPage, onFetchDataSuccess)\n  }, [])\n\n  const onRenderedRowChange = (renderInfo) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRenderedDataIndex,\n      lastRowIndex,\n    } = renderInfo;\n    // If the last row is rendered (NOT visible yet!) and we are not already loading data, we fetch new data\n    // If you want to fetch data when the last row is visible then use onVisibleRowChange\n    if (lastRenderedRowIndex === lastRowIndex) {\n      if (store.isLoading === false) {\n        setStore({ ...store, isLoading: true });\n        fetchData(store.nextPage, onFetchDataSuccess)\n      }\n    }\n  };\n\n  const listData = Object.values(store.data).flat();\n\n  return (\n    <FixedList\n              height={500}\n              rowComponent={Row}\n              data={listData}\n              rowHeight={100}\n              onRenderedRowChange={onRenderedRowChange}\n        />\n  );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? "loading" : value;\n  return <div style={{top, height}} className="react-recycled-row">{displayValue}</div>;\n})',we=a(70);function ge(){var e=r.a.useState(Array(20).fill(null).map((function(e,t){return"item ".concat(t+1)}))),t=Object(Q.a)(e,2),a=t[0],n=t[1],l=r.a.useState(!1),o=Object(Q.a)(l,2),i=o[0],s=o[1];return r.a.createElement(W,{height:500,rowComponent:Ee,data:a,rowHeight:100,onRenderedRowChange:function(e){e.firstRenderedRowIndex,e.firstRenderedDataIndex,e.lastRenderedRowIndex;var t=e.lastRowIndex;e.lastRenderedDataIndex===t&&!1===i&&(s(!0),setTimeout((function(){for(var e=Object(we.a)(a),t=a.length,r=a.length+20,l=t;l<r;l++)e.push("item ".concat(l+1));n(e),s(!1)}),1e3))}})}var Ee=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a],i=void 0===o?"loading":o;return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row"},i)})),ye='import { FixedList } from "react-recycled-list";\nconst numberOfItemPerPage = 20;\n\nfunction LazyLoadingDemo() {\n  const [data, setData] = React.useState( Array(numberOfItemPerPage).fill(null).map((_, index) => `item ${index + 1}`) );\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadData = () => {\n    setTimeout(() => {\n      const newData = [...data];\n      const startIndex = data.length;\n      const endIndex = data.length + numberOfItemPerPage;\n      for (let i = startIndex; i < endIndex; i++) {\n        newData.push(`item ${i + 1}`);\n      }\n      setData(newData);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const onRenderedRowChange = (renderInfo) => {\n    const {\n      firstRenderedRowIndex,\n      firstRenderedDataIndex,\n      lastRenderedRowIndex,\n      lastRenderedDataIndex,\n      lastRowIndex,\n    } = renderInfo;\n    // If the last row is rendered (NOT visible yet!) and we are not already loading data, we fetch new data\n    // If you want to fetch data when the last row is visible then use onVisibleRowChange\n    if (lastRenderedDataIndex === lastRowIndex) {\n      if (isLoading === false) {\n        loadData();\n      }\n    }\n  };\n\n  return (\n    <FixedList\n              height={500}\n              rowComponent={Row}\n              data={data}\n              rowHeight={100}\n              onRenderedRowChange={onRenderedRowChange}\n        />\n  );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? "loading" : value;\n  return <div style={{top, height}} className="react-recycled-row">{displayValue}</div>;\n})';var ve=function(){for(var e={},t=1;t<=10;t++)e[t]={isLoading:!1,hasLoaded:!1,data:Array(10).fill(null).map((function(){}))};return e}();function be(e){return Math.floor(e/10)+1}function xe(){var e=r.a.useState(ve),t=Object(Q.a)(e,2),a=t[0],n=t[1],l=function(e,t){n((function(a){return Object(de.a)(Object(de.a)({},a),{},Object(ce.a)({},t,{data:e,hasLoaded:!0,isLoading:!1}))}))},o=r.a.useMemo((function(){return Object.values(a).map((function(e){return e.data})).flat()}),[a]);return r.a.createElement(W,{height:500,rowComponent:Re,data:o,rowHeight:100,onRenderedRowChange:function(e){var t=e.firstRenderedDataIndex,r=e.lastRenderedDataIndex,o=be(t),i=be(r),s=[o,i];o===i&&s.pop(),s.forEach((function(e){a[e].hasLoaded||a[e].isLoading||(n(Object(de.a)(Object(de.a)({},a),{},Object(ce.a)({},e,Object(de.a)(Object(de.a)({},a[e]),{},{isLoading:!0})))),function(e,t){setTimeout((function(){for(var a=[],n=10*(e-1),r=n;r<n+10;r++)a.push("item ".concat(r+1));t(a,e)}),1e3)}(e,l))}))}})}var Re=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a],i=void 0===o?"loading":o;return r.a.createElement("div",{className:"react-recycled-row",style:{top:n,height:l}},i)})),Ie='import { FixedList } from "react-recycled-list";\n\n// This is a rather complicated example\n// The key point is to paginate your data, and utilize onRenderedRowChange or onVisibleRowChange to load your data\n\nconst numberOfItemPerPage = 10;\nconst numberOfPages = 10;\n// Simulation of an API\nfunction fetchData(page, onSuccess) {\n  setTimeout(() => {\n    const data = [];\n    const startDataIndex = (page - 1) * numberOfItemPerPage;\n    for (\n      let i = startDataIndex;\n      i < startDataIndex + numberOfItemPerPage;\n      i++\n    ) {\n      data.push(`item ${i + 1}`);\n    }\n    onSuccess(data, page);\n  }, 1000);\n}\n\nfunction populateInitialPage() {\n    const page: PageData = {};\n    for (let i = 1; i <= numberOfPages; i++) {\n      page[i] = {\n        isLoading: false,\n        hasLoaded: false,\n        data: Array(numberOfItemPerPage)\n          .fill(null)\n          .map(() => undefined),\n      };\n    }\n    return page;\n}\nconst initialPagedData = populateInitialPage();\n\nfunction getPageFromDataIndex(index: number) {\n    return Math.floor(index / numberOfItemPerPage) + 1;\n}\n  \nfunction DynamicLoadingDemo() {\n    const [pagedData, setPagedData] = React.useState(initialPagedData);\n  \n    const onFetchDataSuccess = (newData, page) => {\n      // Becareful of stale state!\n      setPagedData((pagedData) => {\n        return {\n          ...pagedData,\n          [page]: {\n            data: newData,\n            hasLoaded: true,\n            isLoading: false,\n          },\n        };\n      });\n    };\n  \n    const onRenderedRowChange = (renderInfo) => {\n      const {\n        firstRenderedDataIndex,\n        lastRenderedDataIndex,\n      } = renderInfo;\n  \n      const currentTopPage = getPageFromDataIndex(firstRenderedDataIndex);\n      const currentBottomPage = getPageFromDataIndex(lastRenderedDataIndex);\n      const currentPages = [currentTopPage, currentBottomPage];\n  \n      if (currentTopPage === currentBottomPage) currentPages.pop();\n  \n      currentPages.forEach((page) => {\n        if (!pagedData[page].hasLoaded && !pagedData[page].isLoading) {\n          setPagedData({\n            ...pagedData,\n            [page]: { ...pagedData[page], isLoading: true },\n          });\n          fetchData(page, onFetchDataSuccess);\n        }\n      });\n    };\n    const dataList = Object.values(pagedData).map(({ data }) => data).flat();\n\n    return (\n      <FixedList\n                    height={500}\n                    rowComponent={Row}\n                    data={dataList}\n                    rowHeight={100}\n                    onRenderedRowChange={onRenderedRowChange}\n            />\n    );\n}\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, top, height } = props;\n  const value = data[dataIndex];\n  const displayValue = value === undefined ? "loading" : value;\n  return <div style={{top, height}} className="react-recycled-row">{displayValue}</div>;\n})';function Se(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(W,{height:500,rowComponent:We,data:e,rowHeight:100,useScrollIndicator:!0})}var We=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.isScrolling,l=e.top,o=e.height,i=n?"scrolling":t[a];return r.a.createElement("div",{style:{top:l,height:o},className:"react-recycled-row"},i)})),Te='import { FixedList } from "react-recycled-list";\n\n// If your row component is expensive to render, you can consider rendering a lighter component when scrolling\n\nfunction ScrollIndicatorDemo() {\n  const data = Array(1000).fill(null).map((_, index) => `index ${index}`);\n\n  return <FixedList height={500} rowComponent={Row} data={data} rowHeight={100} useScrollingIndicator/>\n}\n\nconst Row = React.memo(function (props: RowProps) {\n    const { data, dataIndex, isScrolling, top, height } = props;\n    const value = isScrolling? "scrolling" : data[dataIndex];\n    return <div style={{top, height}} className="react-recycled-row">{value}</div>;\n});',Ne=a(303);function Ce(){var e=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)})),t=r.a.useRef();return r.a.createElement("div",null,r.a.createElement("div",{style:{display:"flex",justifyContent:"space-evenly",alignItems:"center",padding:10}},r.a.createElement(Ne.a,{variant:"contained",color:"secondary",style:{textTransform:"none"},onClick:function(){var e;return null===(e=t.current)||void 0===e?void 0:e.scrollTo(350)}},"Scroll to scrollTop 350"),r.a.createElement(Ne.a,{variant:"contained",color:"secondary",style:{textTransform:"none"},onClick:function(){var e;return null===(e=t.current)||void 0===e?void 0:e.scrollToRow(9)}},"Scroll to 10th row"),r.a.createElement(Ne.a,{variant:"contained",color:"secondary",style:{textTransform:"none"},onClick:function(){var e;return null===(e=t.current)||void 0===e?void 0:e.scrollToRow(-1)}},"Scroll to last row"),r.a.createElement(Ne.a,{variant:"contained",color:"secondary",style:{textTransform:"none"},onClick:function(){var e;return null===(e=t.current)||void 0===e?void 0:e.scrollToDataIndex(86)}},"Scroll to 87th data")),r.a.createElement(W,{height:300,rowComponent:De,data:e,rowHeight:100,column:4,ref:t}))}var De=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.top,o=e.height,i=t.slice(a,n),s={width:"25%",textAlign:"center"};return r.a.createElement("div",{style:{top:l,height:o},className:"react-recycled-row"},i.map((function(e){return r.a.createElement("div",{style:s},e)})))})),Le='import { FixedList } from "react-recycled-list";\n\nfunction ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} column={4} ref={ref}/>\n                </div>\n    )\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n        width: "25%",\n        textAlign: "center",\n    };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});',He=a(50),Ae=a(311),Pe=a(305),Fe=a(313),Oe=a(306),je=a(315),ke=a(316),Me=a(51);function Ve(){var e=Array(500).fill(null).map((function(e,t){return t}));return r.a.createElement("div",{className:"App"},r.a.createElement(Me.a,{height:800,itemSize:100,width:"100%",itemCount:e.length},ze))}var ze=r.a.memo((function(e){e.index;var t=e.style,a=function(){};return r.a.createElement("div",{className:"react-recycled-row",style:t},Ue.map((function(e,t){return r.a.createElement(je.a,{key:t,avatar:r.a.createElement(ke.a,null,"M"),label:"Clickable",onClick:a})})))}),Me.b),Ue=Array(15).fill(null).map((function(){})),qe=a(314);function Be(e){var t=e.children,a=e.value,n=e.index,l=Object(He.a)(e,["children","value","index"]);return r.a.createElement("div",Object.assign({role:"tabpanel",hidden:a!==n,id:"simple-tabpanel-".concat(n),"aria-labelledby":"simple-tab-".concat(n)},l),a===n&&r.a.createElement(Ae.a,{p:3},r.a.createElement(c.a,null,t)))}function _e(){var e=Array(500).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(W,{height:800,rowComponent:$e,data:e,rowHeight:100})}var Ye=Array(15).fill(null).map((function(){})),$e=r.a.memo((function(e){e.data,e.dataIndex;var t=e.top,a=e.height,n=function(){};return r.a.createElement("div",{style:{top:t,height:a},className:"react-recycled-row"},Ye.map((function(e,t){return r.a.createElement(je.a,{key:t,avatar:r.a.createElement(ke.a,null,"M"),label:"Clickable",onClick:n})})))})),Ge=Array(500).fill(null).map((function(e,t){}));function Je(){var e=function(){};return r.a.createElement("div",{className:"no-optimization-list"},Ge.map((function(t,a){return r.a.createElement("div",{className:"react-none-recycled-row",key:a,style:{height:100}},Ye.map((function(t,a){return r.a.createElement(je.a,{key:a,avatar:r.a.createElement(ke.a,null,"M"),label:"Clickable",onClick:e})})))})))}var Qe=a(69),Ke=a.n(Qe);function Xe(e){var t=e.children,a=e.value,n=e.index,l=Object(He.a)(e,["children","value","index"]);return r.a.createElement("div",Object.assign({role:"tabpanel",hidden:a!==n,id:"simple-tabpanel-".concat(n),"aria-labelledby":"simple-tab-".concat(n)},l),a===n&&r.a.createElement(Ae.a,{p:3},r.a.createElement(c.a,null,t)))}function Ze(e){var t=e.setPrevScrollTop,a=e.initialScrollTop,n=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)}));return r.a.createElement(W,{height:500,rowComponent:et,data:n,rowHeight:100,initialScrollTop:a,onUnmount:function(e){t(e)}})}var et=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.top,l=e.height,o=t[a];return r.a.createElement("div",{style:{top:n,height:l},className:"react-recycled-row"},o)})),tt='import { FixedList } from "react-recycled-list";\n\nexport default function Tabs() {\n    // App bar and tab navigation are not included in the code here\n    const [prevScrol, setPrevScrollTop] = React.useState(0);\n    return (\n      <div>\n                    <TabPanel value={value} index={0}>\n                            <ScrollRestorationDemo\n                                initialScrollTop={prevScrol}\n                                setPrevScrollTop={setPrevScrollTop}\n                            />\n                    </TabPanel>\n                    <TabPanel value={value} index={1}>\n                            Go back to tab 1 and the scroll position should restore\n                    </TabPanel>\n            </div>\n    );\n  }\n\nfunction ScrollRestorationDemo( props ) {\n    const { setPrevScrollTop, initialScrollTop } = props;\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n  \n    const onUnmount = (scrollTop: number) => {\n      setPrevScrollTop(scrollTop);\n    };\n  \n    return (\n      <FixedList\n                    height={500}\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    initialScrollTop={initialScrollTop}\n                    onUnmount={onUnmount}\n                />\n    );\n  }\n\n// Use React.memo or React pure component to prevent unncessary render\nconst Row = React.memo(function (props) {\n  // the data here is the same data that is passed into the FixedList\n  const { data, dataIndex, top, height } = props;\n\n  const value = data[dataIndex];\n  // Important!, make sure you inline-style your component with the the provided top, height. Also make sure to set your container element to position absolute\n  return <div style={{top, height}} className="react-recycled-row">{value}</div>;\n})';var at='import { FullWindowFixedList } from "react-recycled-list";\n\nfunction FullWindowDemo() {\n\n    const data = Array(1000).fill(null).map((_, index) => `index ${index}`);\n\n    // FixedList and VariableList supports SSR out of the box\n    // However for FullWindowFixedList and FullWindowVariableList you must provide a prop called serverSideHeight that determines the initial render height\n    // For example if serverSideHeight is 1000 and your row height is 100, then there will be 10 (visible row) + 2 (off screen row by default) rendered in the server\n    // Once the component loads on a web page the component will automatically adjust its height and rows to fit the window\n\n    return <FullWindowFixedList rowComponent={Row} data={data} rowHeight={100} serverSideHeight={1080}/>\n}\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex: dataStartIndex, dataEndIndex, column, top, height } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n\n    const columnStyle = {\n      width: column === 1? "100%" : "50%",\n      textAlign: "center",\n    };\n    return (\n      <div style={{top, height}} className="react-recycled-row">\n                        {rowData.map((item) => <div style={columnStyle}>{item}</div>)}\n            </div>\n    );\n});';var nt='const Row = React.memo(function (props) {\n  const { data, dataIndex, top, height } = props;\n  const style={\n      position: "absolute",\n      top,\n      height.\n  }\n  return <div style={style}>{data[dataIndex]}</div>;\n})\n\n// or\n\nconst Row = React.memo(function (props) {\n    const { data, dataIndex, top, height } = props;\n    // the css class "row" contains position: absolute\n    return <div style={{top, height}} className="row">{data[dataIndex]}</div>;\n})',rt='const Row = React.memo(function (props) {\n    const { data, dataIndex, top, height } = props;\n    // the css class "row" contains position: absolute\n    return <div style={{top, height}} className="row">{data[dataIndex]}</div>;\n})',lt=a(49),ot=a.n(lt);function it(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},ct)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"data: Array","<any>",", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An array of data items used to populate your row components. This will be passed to your row component as prop.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},dt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowComponent: React component,"," ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Your react component for rendering each row. Make sure to memoize it and style it correctly with absolute positioning. It will receive the following props:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"top:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style top used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"height:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style height used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"data:"))),r.a.createElement(Ae.a,{p:1,pl:3},r.a.createElement(c.a,{variant:"body1"},"The same data prop you passed into the FixedList component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the data item that this row should render. If you are using a grid, then this is the index of the first data item in this row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataEndIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the index of the data item that the next row should render. This prop is usefull if you are using a grid. Using data.slice(dataIndex, dataEndIndex) will give you the list of data items rendered for this row. For example, if dataIndex is 10 and dataEndIndex is 12, then your row should render 2 items with data index 10 and 11.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"isScrolling:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"Indicate if the current row is being scrolled. If your component is very expensive to render and the user is scrolling fast, you can render a lighter component to increase performance. When the user stops scrolling then you can render the full component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"column:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"How many column/data item does this row have. Is is calculated as dataEndIndex - dataIndex. If you are not using a grid, then this will always be 1.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"row:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the current row. For example, if row = 0 then it means your component is responsible for rendering the first row in the list.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},mt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The heigh of each row in the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"height:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number,")," ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The height of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"column:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many data item each row should render.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowColumns:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<number>"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"This is for variable column grid. rowColumns is a list of number that defines how many column each row should have. Note the sum of rowColumns must be equal to the length of the data.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},pt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"offScreenRow:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 1"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many rows are rendered off screen in each direction. By default there are 2 rows rendered off screen (1 in each direction). Increasing the number of rows rendered off screen may reduce flickering in fast scroll (when the user scrolls too fast and the render cannot keep up). however, it does come with a performance cost.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onRenderedRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(renderInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the rendered row has changed (when any row is recycled). Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},ht)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onVisibleRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(visibilityInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever any visible row is changed. Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onUnmount:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(scrollTop: number) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the list component is unmounted. Usefull for scroll restoration in combination with initialScrollTop.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"initialScrollTop:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 0"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The initial scroll position of the list when first rendered. If initialScrollTop = -1, then the list will scroll to the bottom. Note the initialScrollTop here is relative to the top of the list, meaning that initialScrollTop = 0 will scroll to the first row in the list. It will not scroll to the top of the window.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"useScrollingIndicator:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"boolean, default = false"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Wheather of not to use scroll indicator. If set to yes, then your row component will receive a prop called isScrolling which indicate if the current row is being scrolled.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 250"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the user stops scrolling, before setting isScrolling to false.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listTagName:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},'string, default = "div"'))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The tag name assigned to the full height list")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listProps:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"object, default = ","{}"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The props assigned to the full list element. Usefull for assigning className or accessibility properties. Note that you cannot assign style to it.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},ut)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement("img",{src:ot.a,style:{height:200}})),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listWindowTagName:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},'string, default = "div"'))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The tag name assigned to the list window")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listWindowProps:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"object, default = ","{}"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The props assigned to the list window. Usefull for assigning className or accessibility properties. Note that you cannot assign style to it.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"width:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"string | number, default = ",'"100%"'))),r.a.createElement(Ae.a,{pb:3,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"the width assigned to the list window.")))}function st(e){var t=e.code;return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},t||ft)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollTo(scrollTop: number): void")),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Scroll to the specified position according to the scrollTop value provided. Put scrollTop = -1 to scroll to the bottom of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollToRow(targetRowIndex: number): void")),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Scroll to the specified row. Note the index starts at 0. Put targetRowIndex = -1 to scroll to the last row of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollToDataIndex(targetDataIndex: number): void")),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Scroll to the specified row that contains the target data index. Note the index starts at 0. Put scrollToDataIndex = -1 to scroll to the last data item of the list.")),r.a.createElement(d.a,{className:"divider"}))}var ct='import { FixedList } from "react-recycled-list;',dt='const data = [{firstName: "a", lastName: "b"}, {firstName: "c", lastName: "d"}, {firstName: "e", lastName: "f"}];\nfunction MyList() {\n    //...\n    return <FixedList data={data} .../>\n}',mt='const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: "25%", textAlign: "center" };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});',pt='function MyList() {\n    //...\n    const data = ["item 1", "item 2", "item 3", "item 4", "item 5", "item 6",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <FixedList data={data} rowColumns={rowColumns} .../>\n}',ht="function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <FixedList onRenderedRowChange={onRenderedRowChange} .../>\n}",ut='function MyList() {\n    //...\n    return <FixedList listProps={{className: "myList"}} .../>\n}',ft="function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FixedList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}";function wt(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Et)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"data:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<any>",","," "),r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An array of data items used to populate your row components. This will be passed to your row component as prop.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},yt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowHeights:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}}," ","Array","<number>",","," "),r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An array of number definining the height of each row. The length of rowHeights must match the total number of rows computed from data. For example, if you are not using column, then the length of rowHeights must be the same as the length of data. If you are using a fixed amount of column, then the length of rowHeights must be the same as Math.ceil(data.length / column).")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},gt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowHeight:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number,")," ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An estimate of the height of each row in the list. This is used to determine how many rows to render. You should always underestimate this value to ensure that there are enough rows rendered. For example, if you rows are between 60px - 140px height, then use 80 as the estimated row height.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowComponent:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}}," ","React component,"," "),r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Your react component for rendering each row. Make sure to memoize it and style it correctly with absolute positioning. It will receive the following props:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"top:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style top used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"height:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style height used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"data:"))),r.a.createElement(Ae.a,{p:1,pl:3},r.a.createElement(c.a,{variant:"body1"},"The same data prop you passed into the VariableList component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the data item that this row should render. If you are using a grid, then this is the index of the first data item in this row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataEndIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the index of the data item that the next row should render. This prop is usefull if you are using a grid. Using data.slice(dataIndex, dataEndIndex) will give you the list of data items rendered for this row. For example, if dataIndex is 10 and dataEndIndex is 12, then your row should render 2 items with data index 10 and 11.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"isScrolling:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"Indicate if the current row is being scrolled. If your component is very expensive to render and the user is scrolling fast, you can render a lighter component to increase performance. When the user stops scrolling then you can render the full component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"column:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"How many column/data item does this row have. Is is calculated as dataEndIndex - dataIndex. If you are not using a grid, then this will always be 1.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"row:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the current row. For example, if row = 0 then it means your component is responsible for rendering the first row in the list.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},vt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"height:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number,")," ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The height of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"column:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many data item each row should render.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowColumns:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<number>"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"This is for variable column grid. rowColumns is a list of number that defines how many column each row should have. Note the sum of rowColumns must be equal to the length of the data.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},bt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"offScreenRow:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 1"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many rows are rendered off screen in each direction. By default there are 2 rows rendered off screen (1 in each direction). Increasing the number of rows rendered off screen may reduce flickering in fast scroll (when the user scrolls too fast and the render cannot keep up). however, it does come with a performance cost.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onRenderedRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(renderInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the rendered row has changed (when any row is recycled). Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},xt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onVisibleRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(visibilityInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever any visible row is changed. Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onUnmount:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(scrollTop: number) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the list component is unmounted. Usefull for scroll restoration in combination with initialScrollTop.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"initialScrollTop:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 0"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The initial scroll position of the list when first rendered. If initialScrollTop = -1, then the list will scroll to the bottom. Note the initialScrollTop here is relative to the top of the list, meaning that initialScrollTop = 0 will scroll to the first row in the list. It will not scroll to the top of the window.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"useScrollingIndicator:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"boolean, default = false"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Wheather of not to use scroll indicator. If set to yes, then your row component will receive a prop called isScrolling which indicate if the current row is being scrolled.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 250"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the user stops scrolling, before setting isScrolling to false.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listTagName:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},'string, default = "div"'))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The tag name assigned to the full height list")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listProps:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"object, default = ","{}"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The props assigned to the full list element. Usefull for assigning className or accessibility properties. Note that you cannot assign style to it.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Rt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement("img",{src:ot.a,style:{height:200}})),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listWindowTagName:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},'string, default = "div"'))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The tag name assigned to the list window")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listWindowProps:",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"object, default = ","{}"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The props assigned to the list window. Usefull for assigning className or accessibility properties. Note that you cannot assign style to it.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"width:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"string | number, default = ",'"100%"'))),r.a.createElement(Ae.a,{pb:3,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"the width assigned to the list window.")))}var gt='function MyList() {\n    //...\n    const data = ["A short item", "A longgggggg item", "A longggg item"];\n    // Total of 3 rows. First row has height 50px, second row has height 150px, and third row has height 100px\n    const rowHeights = [50,150,100];\n    return <VariableList rowHeights={rowHeights} .../>\n}',Et='import { VariableList } from "react-recycled-list;',yt='const data = [{firstName: "a", lastName: "b"}, {firstName: "c", lastName: "d"}, {firstName: "e", lastName: "f"}];\nfunction MyList() {\n    //...\n    return <VariableList data={data} .../>\n}',vt='const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: "25%", textAlign: "center" };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});',bt='function MyList() {\n    //...\n    const data = ["item 1", "item 2", "item 3", "item 4", "item 5", "item 6",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <VariableList data={data} rowColumns={rowColumns} .../>\n}',xt="function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <VariableList onRenderedRowChange={onRenderedRowChange} .../>\n}",Rt='function MyList() {\n    //...\n    return <VariableList listProps={{className: "myList"}} .../>\n}',It="function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <VariableList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}";function St(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Wt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"data:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<any>"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An array of data items used to populate your row components. This will be passed to your row component as prop.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Tt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowComponent:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"React component"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Your react component for rendering each row. Make sure to memoize it and style it correctly with absolute positioning. It will receive the following props:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"top:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style top used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"height:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style height used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"data:"))),r.a.createElement(Ae.a,{p:1,pl:3},r.a.createElement(c.a,{variant:"body1"},"The same data prop you passed into the FullWindowFixedList component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the data item that this row should render. If you are using a grid, then this is the index of the first data item in this row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataEndIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the index of the data item that the next row should render. This prop is usefull if you are using a grid. Using data.slice(dataIndex, dataEndIndex) will give you the list of data items rendered for this row. For example, if dataIndex is 10 and dataEndIndex is 12, then your row should render 2 items with data index 10 and 11.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"isScrolling:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"Indicate if the current row is being scrolled. If your component is very expensive to render and the user is scrolling fast, you can render a lighter component to increase performance. When the user stops scrolling then you can render the full component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"column:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"How many column/data item does this row have. Is is calculated as dataEndIndex - dataIndex. If you are not using a grid, then this will always be 1.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"row:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the current row. For example, if row = 0 then it means your component is responsible for rendering the first row in the list.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Nt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The heigh of each row in the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollRef:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"React ref object, default = window"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Element used to attach scroll listener. See"," ",r.a.createElement(u.b,{to:"/custom-window"},"this example")," for more detail.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rootMarginTop:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Amount of space considered invisible at top. Useful when you have a fixed position header that blocks some top part of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rootMarginBottom:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Amount of space considered invisible at bottom. Useful when you have a fixed position footer that blocks the some bottom part of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"windowHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"No real effect. This is used in conjunction with ResponsiveWindowContainer to force rerender when window size change. See ",r.a.createElement(u.b,{to:"/responsive-window"},"this example")," for more detail.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"serverSideHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Used for server side rendering. This specify the height of the list when rendered in the server side(otherwise would be 0).")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"column:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many data item each row should render.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowColumns:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<number>"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"This is for variable column grid. rowColumns is a list of number that defines how many column each row should have. Note the sum of rowColumns must be equal to the length of the data.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Ct)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"offScreenRow:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 1"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many rows are rendered off screen in each direction. By default there are 2 rows rendered off screen (1 in each direction). Increasing the number of rows rendered off screen may reduce flickering in fast scroll (when the user scrolls too fast and the render cannot keep up). however, it does come with a performance cost.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onRenderedRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(renderInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the rendered row has changed (when any row is recycled). Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Dt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onVisibleRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(visibilityInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever any visible row is changed. Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onUnmount:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(scrollTop: number) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the list component is unmounted. Usefull for scroll restoration in combination with initialScrollTop.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"initialScrollTop:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 0"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The initial scroll position of the list when first rendered. If initialScrollTop = -1, then the list will scroll to the bottom. Note the initialScrollTop here is relative to the top of the list, meaning that initialScrollTop = 0 will scroll to the first row in the list. It will not scroll to the top of the window.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"useScrollingIndicator:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"boolean, default = false"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Wheather of not to use scroll indicator. If set to yes, then your row component will receive a prop called isScrolling which indicate if the current row is being scrolled.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 250"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the user stops scrolling, before setting isScrolling to false.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listTagName:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},'string, default = "div"'))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The tag name assigned to the full height list")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listProps:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"object, default = ","{}"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The props assigned to the full list element. Usefull for assigning className or accessibility properties. Note that you cannot assign style to it.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Lt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"width:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"string | number, default = ",'"100%"'))),r.a.createElement(Ae.a,{pb:3,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"the width assigned to the list window.")))}var Wt='import { FullWindowFixedList } from "react-recycled-list;',Tt='const data = [{firstName: "a", lastName: "b"}, {firstName: "c", lastName: "d"}, {firstName: "e", lastName: "f"}];\nfunction MyList() {\n    //...\n    return <FullWindowFixedList data={data} .../>\n}',Nt='const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: "25%", textAlign: "center" };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});',Ct='function MyList() {\n    //...\n    const data = ["item 1", "item 2", "item 3", "item 4", "item 5", "item 6",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <FullWindowFixedList data={data} rowColumns={rowColumns} .../>\n}',Dt="function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <FullWindowFixedList onRenderedRowChange={onRenderedRowChange} .../>\n}",Lt='function MyList() {\n    //...\n    return <FullWindowFixedList listProps={{className: "myList"}} .../>\n}';function Ht(e){var t=e.code;return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},t||"function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FullWindowFixedList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollTo(scrollTop: number): void")),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Scroll to the specified position according to the scrollTop value provided. Put scrollTop = -1 to scroll to the bottom of the list. Note the scrollTop here is relative to the top of the list, meaning that scrollTop = 0 will scroll to the first row in the list. It will not scroll to the top of the window.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollToRow(targetRowIndex: number): void")),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Scroll to the specified row. Note the index starts at 0. Put targetRowIndex = -1 to scroll to the last row of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollToDataIndex(targetDataIndex: number): void")),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Scroll to the specified row that contains the target data index. Note the index starts at 0. Put scrollToDataIndex = -1 to scroll to the last data item of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"setCustomScrollRef(): void")),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"If you are using a custom scroll window instead of the default global window, then you call this method once your scrollRef is set (i.e. ref.current is set to the appropiate element). See"," ",r.a.createElement(u.b,{to:"./custom-window"},"this example")," for more detail.")),r.a.createElement(d.a,{className:"divider"}))}function At(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Pt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"data:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<any>"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An array of data items used to populate your row components. This will be passed to your row component as prop.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Ft)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowHeights:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<number>",","," "),r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"An array of number definining the height of each row. The length of rowHeights must match the total number of rows computed from data. For example, if you are not using column, then the length of rowHeights must be the same as the length of data. If you are using a fixed amount of column, then the length of rowHeights must be the same as Math.ceil(data.length / column).")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},zt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowComponent:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"React component"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Your react component for rendering each row. Make sure to memoize it and style it correctly with absolute positioning. It will receive the following props:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"top:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style top used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"height:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the css style height used to position your row component in the list.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"data:"))),r.a.createElement(Ae.a,{p:1,pl:3},r.a.createElement(c.a,{variant:"body1"},"The same data prop you passed into the FullWindowFixedList component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the data item that this row should render. If you are using a grid, then this is the index of the first data item in this row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"dataEndIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"This is the index of the data item that the next row should render. This prop is usefull if you are using a grid. Using data.slice(dataIndex, dataEndIndex) will give you the list of data items rendered for this row. For example, if dataIndex is 10 and dataEndIndex is 12, then your row should render 2 items with data index 10 and 11.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"isScrolling:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"Indicate if the current row is being scrolled. If your component is very expensive to render and the user is scrolling fast, you can render a lighter component to increase performance. When the user stops scrolling then you can render the full component.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"column:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"How many column/data item does this row have. Is is calculated as dataEndIndex - dataIndex. If you are not using a grid, then this will always be 1.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"row:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The index of the current row. For example, if row = 0 then it means your component is responsible for rendering the first row in the list.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Ot)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The heigh of each row in the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollRef:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"React ref object, default = window"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Element used to attach scroll listener. See"," ",r.a.createElement(u.b,{to:"/custom-window"},"this example")," for more detail.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rootMarginTop:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Amount of space considered invisible at top. Useful when you have a fixed position header that blocks some top part of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rootMarginBottom:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Amount of space considered invisible at bottom. Useful when you have a fixed position footer that blocks the some bottom part of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"windowHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"No real effect. This is used in conjunction with ResponsiveWindowContainer to force rerender when window size change. See ",r.a.createElement(u.b,{to:"/responsive-window"},"this example")," for more detail.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"serverSideHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Used for server side rendering. This specify the height of the list when rendered in the server side(otherwise would be 0).")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"column:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many data item each row should render.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"rowColumns:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"Array","<number>"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"This is for variable column grid. rowColumns is a list of number that defines how many column each row should have. Note the sum of rowColumns must be equal to the length of the data.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},jt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"offScreenRow:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 1"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many rows are rendered off screen in each direction. By default there are 2 rows rendered off screen (1 in each direction). Increasing the number of rows rendered off screen may reduce flickering in fast scroll (when the user scrolls too fast and the render cannot keep up). however, it does come with a performance cost.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onRenderedRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(renderInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the rendered row has changed (when any row is recycled). Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last rendered row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRenderedDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last rendered data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},kt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onVisibleRowChange:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(visibilityInfo) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever any visible row is changed. Usefull for loading data. It will receive a object parameter that contains the following information:")),r.a.createElement(Ae.a,{p:0,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the first visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"firstVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the first visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last visible row.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastVisibleDataIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The data index of the last visible data item.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"lastRowIndex:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The row index of the last row.")))),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"onUnmount:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"(scrollTop: number) => void"))),r.a.createElement(Ae.a,{pb:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Callback function that is called whenever the list component is unmounted. Usefull for scroll restoration in combination with initialScrollTop.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"initialScrollTop:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 0"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The initial scroll position of the list when first rendered. If initialScrollTop = -1, then the list will scroll to the bottom. Note the initialScrollTop here is relative to the top of the list, meaning that initialScrollTop = 0 will scroll to the first row in the list. It will not scroll to the top of the window.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"useScrollingIndicator:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"boolean, default = false"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Wheather of not to use scroll indicator. If set to yes, then your row component will receive a prop called isScrolling which indicate if the current row is being scrolled.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number, default = 250"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the user stops scrolling, before setting isScrolling to false.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listTagName:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},'string, default = "div"'))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The tag name assigned to the full height list")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"listProps:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"object, default = ","{}"))),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The props assigned to the full list element. Usefull for assigning className or accessibility properties. Note that you cannot assign style to it.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Mt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"width:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"string | number, default = ",'"100%"'))),r.a.createElement(Ae.a,{pb:3,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"the width assigned to the list window.")))}var Pt='import { FullWindowVariableList } from "react-recycled-list;',Ft='const data = [{firstName: "a", lastName: "b"}, {firstName: "c", lastName: "d"}, {firstName: "e", lastName: "f"}];\nfunction MyList() {\n    //...\n    return <FullWindowVariableList data={data} .../>\n}',Ot='const MyRow = React.memo(function (props) {\n    // This is a grid row that has 4 data items in it\n    const { data, dataIndex: dataStartIndex, dataEndIndex, top, height, row, column } = props;\n    const rowData = data.slice(dataStartIndex, dataEndIndex);\n    const columnStyle = { width: "25%", textAlign: "center" };\n    return (\n        <div style={{top, height}} className="react-recycled-row">\n                            {rowData.map((item) => <div style={columnStyle} key={item}>{item}</div>)}\n                 </div>\n    )\n});',jt='function MyList() {\n    //...\n    const data = ["item 1", "item 2", "item 3", "item 4", "item 5", "item 6",];\n    // Total of 3 rows. First row has 1 column, second row has 2 columns and thrid row has 1 column\n    // total number of data items = 3 + 1 + 2 = 6 = length of data\n    const rowColumns = [3,1,2];\n    return <FullWindowVariableList data={data} rowColumns={rowColumns} .../>\n}',kt="function LazyLoadingDemo() {\n    // ....\n    const onRenderedRowChange = (renderInfo) => {\n        const {\n            firstRenderedRowIndex,\n            firstRenderedDataIndex,\n            lastRenderedRowIndex,\n            lastRenderedDataIndex,\n            lastRowIndex,\n        } = renderInfo;\n        // If the last row is rendered (NOT visible yet!) and we are not already loading data, then we fetch new data\n        // If you want to fetch data when the last row is visible, use onVisibleRowChange\n        if (lastRenderedDataIndex === lastRowIndex) {\n            if (isLoading === false) {\n                loadData();\n            }\n        }\n    }\n    return <FullWindowVariableList onRenderedRowChange={onRenderedRowChange} .../>\n}",Mt='function MyList() {\n    //...\n    return <FullWindowVariableList listProps={{className: "myList"}} .../>\n}',Vt="function ScrollToDemo() {\n    const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n    const ref = React.useRef();\n    return (\n        <div>\n                        <button onClick={() => ref.current?.scrollTo(350)} />\n                        <button onClick={() => ref.current?.scrollToRow(9)} />\n                        <button onClick={() => ref.current?.scrollToRow(-1)} />\n                        <button onClick={() => ref.current?.scrollToDataIndex(86)} />\n                        <FullWindowVariableList height={300} rowComponent={Row} data={data} rowHeight={100} ref={ref}/>\n                </div>\n    )\n}",zt='function MyList() {\n    //...\n    const data = ["A short item", "A longgggggg item", "A longggg item"];\n    // Total of 3 rows. First row has height 50px, second row has height 150px, and third row has height 100px\n    const rowHeights = [50,150,100];\n    return <FullWindowVariableList rowHeights={rowHeights} .../>\n}';var Ut='import { ResponsiveWindowContainer } from "react-recycled-list;',qt="const renderList = (sizeInfo) => {\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FullWindowFixedList\n                      windowHeight={height}\n                      rowComponent={Row}\n                      data={data}\n                      rowHeight={100}\n                      column={column}\n              />\n    );\n};";function Bt(){var e=r.a.useRef(),t=r.a.useRef();r.a.useLayoutEffect((function(){t.current.setCustomScrollRef()}),[]);var a=Array(1e3).fill(null).map((function(e,t){return"item ".concat(t)})),n={textAlign:"center",padding:20};return r.a.createElement("div",{ref:e,style:{height:500,width:"100%",overflowY:"scroll"}},r.a.createElement("div",{style:n},"some random ui"),r.a.createElement("div",{style:n},"some random ui"),r.a.createElement(D,{render:function(n){return r.a.createElement(N,{windowHeight:n.height,rowComponent:_t,data:a,rowHeight:100,scrollRef:e,ref:t,column:n.width>1200?2:1})},scrollRef:e}),r.a.createElement("div",{style:n},"some random ui"),r.a.createElement("div",{style:n},"some random ui"))}var _t=r.a.memo((function(e){var t=e.data,a=e.dataIndex,n=e.dataEndIndex,l=e.top,o=e.height,i=e.column,s=t.slice(a,n),c={width:1===i?"100%":"50%",textAlign:"center"};return r.a.createElement("div",{style:{top:l,height:o},className:"react-recycled-row"},s.map((function(e){return r.a.createElement("div",{style:c},e)})))})),Yt='import { FullWindowFixedList, FullWindowVariableList } from "react-recycled-list";\n\nfunction ResponsiveCustomWindowDemo() {\n  const data = Array(1000).fill(null).map((_, index) => `item ${index}`);\n  const scrollRef = React.useRef();\n  const listRef = React.useRef();\n\n  // Important! ref.current is initially undefined. When ref.current is set you must notify FullWindowFixedList or FullWindowVariableList \n  // You can notify it by rerendering or by calling setCustomScrollRef on the list class\n\n  React.useLayoutEffect(() => {\n    listRef.current.setCustomScrollRef();\n  }, []);\n\n  const containerStyle = {\n    height: 500,\n    width: "100%",\n    overflowY: "scroll",\n  };\n\n  const fillerStyle = {\n    textAlign: "center",\n    padding: 20,\n  };\n\n  const renderList = (sizeInfo) => {\n    return (\n      <FullWindowFixedList\n                    windowHeight={sizeInfo.height}\n                    rowComponent={Row}\n                    data={data}\n                    rowHeight={100}\n                    scrollRef={scrollRef}\n                    ref={listRef}\n                    column={sizeInfo.width > 1200 ? 2 : 1}\n          />\n    );\n  };\n\n  return (\n    <div ref={ref} style={containerStyle}>\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n              <ResponsiveWindowContainer\n                    render={renderList}\n                    scrollRef={scrollRef}\n              />\n              <div style={fillerStyle}>some random ui</div>\n              <div style={fillerStyle}>some random ui</div>\n    </div>\n  );\n}\n\nconst Row = React.memo(function (props: RowProps) {\n  const { data, dataIndex, dataEndIndex, top, height, column } = props;\n  const rowData = data.slice(dataIndex, dataEndIndex);\n\n  const columnStyle = {\n    width: column === 1? "100%": "50%",\n    textAlign: "center" as any,\n  };\n  return (\n    <div style={{ top, height }} className="react-recycled-row">\n                  {rowData.map((item) => (\n                        <div style={columnStyle}>{item}</div>\n                  ))}\n        </div>\n  );\n});;';var $t='import { ResponsiveContainer } from "react-recycled-list;',Gt="const renderList = (sizeInfo) => {\n    const { width, height } = sizeInfo;\n    const column = width > 1200 ? 2 : 1;\n    return (\n      <FullWindowFixedList\n                      windowHeight={height}\n                      rowComponent={Row}\n                      data={data}\n                      rowHeight={100}\n                      column={column}\n              />\n    );\n};",Jt=new Ke.a;function Qt(){var e=Object(i.f)().pathname;return r.a.useEffect((function(){var e;null===(e=document.getElementById("statsjs"))||void 0===e||e.appendChild(Jt.dom)}),[]),r.a.createElement("div",null,r.a.createElement(s.a,{variant:"permanent",anchor:"left"},r.a.createElement(c.a,{variant:"h6",className:"site-title"},"React recycled list"),r.a.createElement(d.a,null),r.a.createElement(m.a,{id:"statsjs"},r.a.createElement(p.a,{primary:"Stats.js:",className:"first-level"})),r.a.createElement(h.a,null,r.a.createElement(d.a,null),r.a.createElement(m.a,null,r.a.createElement(p.a,{primary:"Introduction",className:"first-level"})),Kt.map((function(t){var a=t.label,n=t.route;return r.a.createElement(m.a,{button:!0,key:a,className:"second-level",component:u.b,to:n,selected:e===n},r.a.createElement(p.a,{primary:a}))})),r.a.createElement(m.a,null,r.a.createElement(p.a,{primary:"Examples",className:"first-level"})),Xt.map((function(t){var a=t.label,n=t.route;return r.a.createElement(m.a,{button:!0,key:a,className:"second-level",component:u.b,to:n,selected:e===n},r.a.createElement(p.a,{primary:a}))}))),r.a.createElement(d.a,null),r.a.createElement(h.a,null,r.a.createElement(m.a,null,r.a.createElement(p.a,{primary:"Components",className:"first-level"})),Zt.map((function(t){var a=t.label,n=t.route;return r.a.createElement(m.a,{button:!0,key:a,className:"second-level",component:u.b,to:n,selected:e===n},r.a.createElement(p.a,{primary:a}))})))))}Jt.dom.style.left="300px",Jt.dom.style.position="",Jt.showPanel(0),requestAnimationFrame((function e(){Jt.begin(),Jt.end(),requestAnimationFrame(e)}));var Kt=[{label:"Why use react recycled list",route:"/",component:function(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:3,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"What is react-recycled-list?")),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"react-recycled-list is a library for rendering large list with expensive components. Like"," ",r.a.createElement("a",{href:"https://github.com/bvaughn/react-window",target:"blank"},"react-window")," ","and"," ",r.a.createElement("a",{href:"https://github.com/bvaughn/react-virtualized",target:"blank"},"react-virtualized"),", react-recycled-list only renders the rows that are visible to the user to improve performance. However, react-recycled-list has a different approach compared to traditional windowing library. The main difference is that react-recycled-list keeps the integrity of the DOM tree, meaning it does not add or remove any DOM node. Instead, whenever a row goes off screen, its DOM will be \u201crecycled\u201d to the appropriate position by an update to its absolute position. This allows react-recycled-list to truly keep a constant amount of DOM and prevent unmounting which in some cases can be noticeably more performant than traditional windowing library.")),r.a.createElement(Ae.a,{p:2,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"Why use react-recycled-list?")),r.a.createElement(Ae.a,{p:3,pt:2,pb:1,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The main reason you may want to use react-recycled-list is the extreme scrolling performance it provides. However, there are also other perks:")),r.a.createElement(Ae.a,{p:2,pt:0,pl:5,pr:5},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"},r.a.createElement("span",{style:{fontWeight:500}},"Performance:"))),r.a.createElement(Ae.a,{p:1,pl:3},r.a.createElement(c.a,{variant:"body1"},"react-recycled-list prevents unmounting and remounting of row component when scrolling, and it utilizes an extremely effient data structure to track/compute position of rows in the list.")),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"In the worst case scenario (when your row component is extremely simple), react-recycled-list will on average be at least 30% more performant than traditional windowing library.")),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"The performance advantave of react-recycled-list increases as the complexity of the row component increases. If your row component is expensive to render, then it is very common for react-recycled-list to have more than 100%, 200% or even 300%+ the performance (in terms of scripting time and rendering time) of traditional windowing library. It also produces noticeably less flickering in fast scrolling.")),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"Note: If you row component is not expensive enough for react-recycled-list to make a difference, you can turn on CPU throttle in google developer tool to simulate scrolling on devices with low-end hardware.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"}," ",r.a.createElement("span",{style:{fontWeight:500}},"Feature:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"react-recycled-list is feature rich and includes almost everything you need. It provides fixed row height list/grid, variable row height list/grid, variable column grid, full window list/grid, custom window list/grid, responsive list/grid, infinite loading, dynamic loading, scroll restoration, server side rendering and so on, all in one place.")),r.a.createElement("li",null,r.a.createElement(c.a,{variant:"body1"}," ",r.a.createElement("span",{style:{fontWeight:500}},"Size:"))),r.a.createElement(Ae.a,{p:.5,pl:3},r.a.createElement(c.a,{variant:"body1"},"Despite having a complete set of features, react-recycled-list is extremely small in size. At a mere 7kb g-ziped size.")))),r.a.createElement(Ae.a,{pt:1,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"How does it work?")),r.a.createElement(Ae.a,{p:3,pt:2,pb:1,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"This library is inspired by this acticle"," ",r.a.createElement("a",{href:"https://engineering.monday.com/building-our-recycle-list-solution-in-react/",target:"_blank"},"here"),". Check it out to find out how react-recycled-list works.")),r.a.createElement(Ae.a,{pt:3,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"Caveat of react-recycled-list?")),r.a.createElement(Ae.a,{p:0,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The main caveat of react-recycled-list is that you must know the height of each row in advance. Mechanism for determining the height of each row automatically is planned.")),r.a.createElement(Ae.a,{p:3,pt:2,pb:3,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"Another caveat of react-recycled-list it that it only supports vertical list/scrolling. If you are looking for horizontal scrolling, then"," ",r.a.createElement("a",{href:"https://github.com/bvaughn/react-window",target:"blank"},"react-window")," ","and"," ",r.a.createElement("a",{href:"https://github.com/bvaughn/react-virtualized",target:"blank"},"react-virtualized")," ","are your best choices.")))}},{label:"Performance demo",route:"/performance",component:function(){var e=r.a.useState(0),t=Object(Q.a)(e,2),a=t[0],n=t[1];return r.a.createElement("div",null,r.a.createElement(Pe.a,{position:"static"},r.a.createElement(Fe.a,{value:a,onChange:function(e,t){n(t)},"aria-label":"simple tabs example"},r.a.createElement(Oe.a,{label:"With react-recycled-list"}),r.a.createElement(Oe.a,{label:"Without react-recycled-list"}),r.a.createElement(Oe.a,{label:"With react-window"}))),r.a.createElement(Ae.a,{p:3,pb:1},r.a.createElement(qe.a,{severity:"warning",variant:"filled",style:{justifyContent:"center"}},"Warning, using a production build will give you much better performance. To test react-recycled-list to the extreme, turn on CPU throttle in google developer tool")),r.a.createElement(Be,{value:a,index:0},r.a.createElement(_e,null)),r.a.createElement(Be,{value:a,index:1},r.a.createElement(Je,null)),r.a.createElement(Be,{value:a,index:2},r.a.createElement(Ve,null)))}},{label:"Before you begin",route:"/QA",component:function(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:3,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"Make sure to style/position your component correctly!")),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"react-recycled-list uses absolute positioning to position its list items. You must use the style provided by react-recycled-list on your row component:")),r.a.createElement(Ae.a,{pb:0,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},nt)),r.a.createElement(Ae.a,{p:3,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"Performance is slower than expected?")),r.a.createElement(Ae.a,{p:3,pt:2,pb:1,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"It is important to memoize your row component, especially if your row component is expensive to render. You can do so by using React.memo or extending pure component:")),r.a.createElement(Ae.a,{pb:0,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},rt)),r.a.createElement(Ae.a,{p:3,pt:2,pb:1,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"If you still find the performance slower than expected, then it is likely because you are in development mode and have react dev extensions enabled. Make sure to use a produciton build and use a incognito window to benchmark.")),r.a.createElement(Ae.a,{p:3,pb:0,pl:5,pr:5},r.a.createElement(c.a,{variant:"h5",style:{fontWeight:500}},"A note about benchmarking performance")),r.a.createElement(Ae.a,{p:3,pt:2,pb:1,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"It is recommended to use"," ",r.a.createElement("a",{href:"https://github.com/mrdoob/stats.js/",target:"blank"},"Stats.js")," ","to monitor fps in real time. You can also use the performance monitor in google developer tool to inspect scripting and rendering time.")),r.a.createElement(Ae.a,{p:3,pt:2,pb:1,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"To simulate scrolling on devices with low-end hardware, turn on CPU throttling in performance tab under google devloper tool. As mentioned above, all benchmark should be conducted using a production build.")))}}],Xt=[{label:"Simple List",route:"/simple-list",component:function(){return r.a.createElement(A,{code:j,Demo:F})}},{label:"Simple Grid",route:"/simple-grid",component:function(){return r.a.createElement(A,{code:V,Demo:k})}},{label:"Variable row height",route:"/variable-row-height",component:function(){return r.a.createElement(A,{code:q,Demo:z})}},{label:"Variable column",route:"/variable-column",component:function(){return r.a.createElement(A,{code:Y,Demo:B})}},{label:"Variable row height + column ",route:"/variable-height-column",component:function(){return r.a.createElement(A,{code:Z,Demo:K})}},{label:"Full window list/grid",route:"/full-window",component:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"code-section half-section"},r.a.createElement("div",{className:"code-wrapper"},r.a.createElement(H.a,{language:"js"},J))),r.a.createElement("div",{className:"demo-section half-section"},r.a.createElement($,null)))}},{label:"Custom window list/grid",route:"/custom-window",component:function(){return r.a.createElement(A,{code:ae,Demo:ee})}},{label:"Responsive list/grid",route:"/responsive-list/grid",component:function(){return r.a.createElement(A,{code:le,Demo:ne})}},{label:"Responsive window list/grid",route:"/responsive-window",component:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"code-section half-section"},r.a.createElement("div",{className:"code-wrapper"},r.a.createElement(H.a,{language:"js"},se))),r.a.createElement("div",{className:"demo-section half-section"},r.a.createElement(oe,null)))}},{label:"Responsive custom window",route:"/responsive-custom-window",component:function(){return r.a.createElement(A,{code:Yt,Demo:Bt})}},{label:"Simple Infinite loading",route:"/lazy-loading-simple",component:function(){return r.a.createElement(A,{code:ye,Demo:ge})}},{label:"Advanced Infinite loading",route:"/lazy-loading-advance",component:function(){return r.a.createElement(A,{code:fe,Demo:he})}},{label:"Dynamic loading",route:"/dynamic-loading",component:function(){return r.a.createElement(A,{code:Ie,Demo:xe})}},{label:"Scroll indicator",route:"/scroll-indicator",component:function(){return r.a.createElement(A,{code:Te,Demo:Se})}},{label:"Scroll to",route:"/scroll-to",component:function(){return r.a.createElement(A,{code:Le,Demo:Ce})}},{label:"Scroll restoration",route:"/scroll-restoration",component:function(){var e=r.a.useState(0),t=Object(Q.a)(e,2),a=t[0],n=t[1],l=r.a.useState(0),o=Object(Q.a)(l,2),i=o[0],s=o[1];return r.a.createElement("div",null,r.a.createElement(Pe.a,{position:"static"},r.a.createElement(Fe.a,{value:a,onChange:function(e,t){n(t)},"aria-label":"simple tabs example"},r.a.createElement(Oe.a,{label:"tab 1"}),r.a.createElement(Oe.a,{label:"tab 2"}))),r.a.createElement(Xe,{value:a,index:0},r.a.createElement("div",{className:"demo-section half-section"},r.a.createElement(Ze,{initialScrollTop:i,setPrevScrollTop:s})),r.a.createElement("div",{className:"code-section half-section"},r.a.createElement("div",{className:"code-wrapper"},r.a.createElement(H.a,{language:"js"},tt)))),r.a.createElement(Xe,{value:a,index:1},r.a.createElement(c.a,{variant:"h6"},"Go back to tab 1 and the scroll position should restore")))}},{label:"Server side rendering",route:"/ssr",component:function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"code-section half-section"},r.a.createElement("div",{className:"code-wrapper"},r.a.createElement(H.a,{language:"js"},at))))}}],Zt=[{label:"FixedSizeList",route:"/fixedsizelist",component:function(){var e=r.a.useState(0),t=Object(Q.a)(e,2),a=t[0],n=t[1];return r.a.createElement("div",null,r.a.createElement(Pe.a,{position:"static"},r.a.createElement(Fe.a,{value:a,onChange:function(e,t){n(t)},"aria-label":"simple tabs example"},r.a.createElement(Oe.a,{label:"Props"}),r.a.createElement(Oe.a,{label:"Methods"}))),r.a.createElement(Be,{value:a,index:0},r.a.createElement(it,null)),r.a.createElement(Be,{value:a,index:1},r.a.createElement(st,null)))}},{label:"VariableSizeList",route:"/variablesizelist",component:function(){var e=r.a.useState(0),t=Object(Q.a)(e,2),a=t[0],n=t[1];return r.a.createElement("div",null,r.a.createElement(Pe.a,{position:"static"},r.a.createElement(Fe.a,{value:a,onChange:function(e,t){n(t)},"aria-label":"simple tabs example"},r.a.createElement(Oe.a,{label:"Props"}),r.a.createElement(Oe.a,{label:"Methods"}))),r.a.createElement(Be,{value:a,index:0},r.a.createElement(wt,null)),r.a.createElement(Be,{value:a,index:1},r.a.createElement(st,{code:It})))}},{label:"FullWindowFixedList",route:"/fullWindowFixedList",component:function(){var e=r.a.useState(0),t=Object(Q.a)(e,2),a=t[0],n=t[1];return r.a.createElement("div",null,r.a.createElement(Pe.a,{position:"static"},r.a.createElement(Fe.a,{value:a,onChange:function(e,t){n(t)},"aria-label":"simple tabs example"},r.a.createElement(Oe.a,{label:"Props"}),r.a.createElement(Oe.a,{label:"Methods"}))),r.a.createElement(Be,{value:a,index:0},r.a.createElement(St,null)),r.a.createElement(Be,{value:a,index:1},r.a.createElement(Ht,null)))}},{label:"FullWindowVariableList ",route:"/variablesizewindowList",component:function(){var e=r.a.useState(0),t=Object(Q.a)(e,2),a=t[0],n=t[1];return r.a.createElement("div",null,r.a.createElement(Pe.a,{position:"static"},r.a.createElement(Fe.a,{value:a,onChange:function(e,t){n(t)},"aria-label":"simple tabs example"},r.a.createElement(Oe.a,{label:"Props"}),r.a.createElement(Oe.a,{label:"Methods"}))),r.a.createElement(Be,{value:a,index:0},r.a.createElement(At,null)),r.a.createElement(Be,{value:a,index:1},r.a.createElement(Ht,{code:Vt})))}},{label:"ResponsiveContainer",route:"/rResponsivecontainer",component:function(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},$t)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"render:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"({height: number, width: number}): any"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"A function that renders the list based on the given height and width. The given height and width is the height and width of the parent element of ResponsiveContainer.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Gt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"debounceResize:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"boolean, default = false"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"If set true the list will adjust its height and width only when the user stops resizing.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"debounceInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the the user stops resizing to triger the resizing (re-computation) of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"debounceInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the the user stops resizing to triger the resizing (re-computation) of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"serverSideHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The initial rendered height of the list. This will determine how many rows are rendered on the server side. Once the page loads the height will be adjusted to the height of its the global window object or the element that scrollRef points to (if set).")),r.a.createElement(d.a,{className:"divider"}))}},{label:"ResponsiveWindowContainer",route:"/responsiveWindowcontainer",component:function(){return r.a.createElement("div",{className:"why-page"},r.a.createElement(Ae.a,{p:1,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},Ut)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"render:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"({height: number, width: number}): any"),", ",r.a.createElement("span",{className:"required"},"required*"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"A function that renders the list based on the given height and width. If a custom window is used, then the height and width passed into this function will be the height and width of the element that the scrollRef points to. Otherwise, it would be the height and width of the global window object. See"," ",r.a.createElement(u.b,{to:"./custom-window"},"default window example")," or"," ",r.a.createElement(u.b,{to:"./custom-window"},"custom window example")," for more detail.")),r.a.createElement(Ae.a,{pb:3,pt:0,pl:5,pr:5},r.a.createElement(H.a,{language:"js"},qt)),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"scrollRef:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"React ref object"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The element that you use to attach the scroll listener. This is usefull when you want to use a custom window list/grid. See"," ",r.a.createElement(u.b,{to:"./responsive-custom-window"},"this example")," for more detail.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"debounceResize:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"boolean, default = false"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"If set true the list will adjust its height and width only when the user stops resizing.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"debounceInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the the user stops resizing to triger the resizing (re-computation) of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"debounceInterval:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"How many milisecond to wait after the the user stops resizing to triger the resizing (re-computation) of the list.")),r.a.createElement(d.a,{className:"divider"}),r.a.createElement(Ae.a,{pl:5,pr:5},r.a.createElement(c.a,{variant:"h6",style:{fontWeight:500}},"serverSideHeight:"," ",r.a.createElement("span",{style:{fontStyle:"italic",fontWeight:"normal"}},"number"))),r.a.createElement(Ae.a,{pb:2,pt:2,pl:5,pr:5},r.a.createElement(c.a,{variant:"body1"},"The initial rendered height of the list. This will determine how many rows are rendered on the server side. Once the page loads the height will be adjusted to the height of its the global window object or the element that scrollRef points to (if set).")),r.a.createElement(d.a,{className:"divider"}))}}],ea=(a(279),function(){return r.a.createElement("div",{className:"root-content"},r.a.createElement(Qt,null),r.a.createElement("main",null,r.a.createElement(i.c,null,Xt.map((function(e){var t=e.route,a=e.component;return r.a.createElement(i.a,{path:t,exact:!0},r.a.createElement(a,null))})),Kt.map((function(e){var t=e.route,a=e.component;return r.a.createElement(i.a,{path:t,exact:!0},r.a.createElement(a,null))})),Zt.map((function(e){var t=e.route,a=e.component;return r.a.createElement(i.a,{path:t,exact:!0},r.a.createElement(a,null))})))))});o.a.render(r.a.createElement(u.a,null,r.a.createElement(ea,null)),document.getElementById("root"))},49:function(e,t,a){e.exports=a.p+"static/media/listProps.6e1f7ffb.png"},78:function(e,t,a){e.exports=a(280)},79:function(e,t,a){},84:function(e,t,a){}},[[78,1,2]]]);
//# sourceMappingURL=main.8e2e63e0.chunk.js.map